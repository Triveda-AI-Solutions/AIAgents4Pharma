{"config":{"lang":["en","de"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"\ud83e\udd16 AIAgents4Pharma <p>Welcome to AIAgents4Pharma \u2013 an open-source project by Team VPE that brings together AI-driven tools to help researchers and pharma interact seamlessly with complex biological data.</p> <p>Our toolkit currently consists of three agents, each designed to simplify and enhance access to complex data in biology:</p> <ul> <li> <p>Talk2BioModels: Engage directly with mathematical models in systems biology.</p> </li> <li> <p>Talk2Cells (Coming soon): Query and analyze sequencing data with ease.</p> </li> <li> <p>Talk2KnowledgeGraphs (Coming soon): Access and explore complex biological knowledge graphs for insightful data connections.</p> </li> </ul>"},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.10+</li> <li>Git</li> <li>Required libraries specified in <code>requirements.txt</code></li> </ul>"},{"location":"#installation","title":"Installation","text":""},{"location":"#option-1-pypi","title":"Option 1: PyPI","text":"<pre><code>pip install aiagents4pharma\n</code></pre> <p>Check out the tutorials on each agent for detailed instrcutions.</p>"},{"location":"#option-2-git","title":"Option 2: Git","text":"<ol> <li> <p>Clone the repository: <pre><code>git clone https://github.com/VirtualPatientEngine/AIAgents4Pharma\ncd AIAgents4Pharma\n</code></pre></p> </li> <li> <p>Install dependencies: <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Initialize OPENAI_API_KEY <pre><code>export OPENAI_API_KEY = ....\n</code></pre></p> </li> <li> <p>[Optional] Set up login credentials <pre><code>vi .streamlit/secrets.toml\n</code></pre>    and enter    <pre><code>password='XXX'\n</code></pre>    Please note that the passowrd will be same for all.</p> </li> <li> <p>[Optional] Initialize LANGSMITH_API_KEY <pre><code>export LANGCHAIN_TRACING_V2=true\nexport LANGCHAIN_API_KEY=&lt;your-api-key&gt;\n</code></pre>    Please note that this will create a new tracing project in your Langsmith     account with the name <code>&lt;user_name&gt;@&lt;uuid&gt;</code>, where <code>user_name</code> is the name     you provided in the previous step. If you skip the previous step, it will     default to <code>default</code>.</p> </li> <li> <p>Launch the app: <pre><code>streamlit run app/frontend/streamlit_app.py\n</code></pre></p> </li> </ol>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions to AIAgents4Pharma! Here\u2019s how you can help:</p> <ol> <li>Fork the repository</li> <li>Create a new branch for your feature (<code>git checkout -b feat/feature-name</code>)</li> <li>Commit your changes (<code>git commit -m 'feat: Add new feature'</code>)</li> <li>Push to the branch (<code>git push origin feat/feature-name</code>)</li> <li>Open a pull request</li> </ol> <p>Check out our CONTRIBUTING.md for more information.</p>"},{"location":"CONTRIBUTING/","title":"Contributing","text":""},{"location":"CONTRIBUTING/#contributing-guidelines","title":"Contributing Guidelines","text":"<p>Thank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional documentation, we greatly value feedback and contributions from our community.</p> <p>Please read through this document before submitting any issues or pull requests to ensure we have all the necessary information to effectively respond to your bug report or contribution.</p> <p>In addition, please review our CodeOps to understand our approach to coding.</p>"},{"location":"CONTRIBUTING/#code-contributions","title":"Code contributions","text":""},{"location":"CONTRIBUTING/#reporting-bugsfeature-requests","title":"Reporting Bugs/Feature Requests","text":"<p>Please use the GitHub issue tracker to report bugs or suggest features.</p> <p>When filing an issue, please check existing open, or recently closed, issues to make sure somebody else hasn't already reported the issue. Please try to include as much information as you can following the bug and feature templates that we provide.</p>"},{"location":"CONTRIBUTING/#contributing-via-pull-requests","title":"Contributing via Pull Requests","text":"<p>Contributions via pull requests are much appreciated. Before sending us a pull request, please review our DevOps guide, and please ensure that:</p> <ol> <li>You are working against the latest source on the main branch.</li> <li>You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already.</li> <li>You open an issue to discuss any significant work - we would hate for your time to be wasted.</li> </ol>"},{"location":"CONTRIBUTING/#finding-contributions-to-work-on","title":"Finding contributions to work on","text":"<p>Looking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start.</p>"},{"location":"CONTRIBUTING/#code-of-conduct","title":"Code of Conduct","text":"<p>This project follows the Apache Code of Conduct.</p>"},{"location":"CONTRIBUTING/#security-issue-notifications","title":"Security issue notifications","text":"<p>If you discover a potential security issue in this project we ask that you notify Team VPE directly: mccloskey at bio dot mx. Please do not create a public github issue.</p>"},{"location":"CONTRIBUTING/#attributions","title":"Attributions","text":"<p>Portions adopted from https://github.com/pytorch, https://github.com/rapidsai, and https://github.com/aws-samples/</p>"},{"location":"Talk2KnowledgeGraphs/intro/","title":"Talk2Knowledgegraphs","text":"<p>Talk2KnowledgeGraphs is an agent designed to enable interaction with biological knowledge graphs (KGs). KGs integrate vast amounts of structured biological data into a format that highlights relationships between entities, such as proteins, genes, and diseases.</p>"},{"location":"Talk2KnowledgeGraphs/intro/#work-in-progress","title":"Work in Progress..","text":""},{"location":"notebooks/talk2biomodels/tutorial/","title":"Tutorials","text":"In\u00a0[103]: Copied! <pre># !pip install aiagents4pharma \n#This will install the aiagents4pharma library and all its dependencies.\n</pre> # !pip install aiagents4pharma  #This will install the aiagents4pharma library and all its dependencies. <p>Before using the model tools, you need to authenticate using an API key. You can either store the API key in an environment variable or set it directly in your notebook/script.</p> In\u00a0[104]: Copied! <pre>import os\nimport openai \n\n# Retrieve API key from environment variable\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\n</pre> import os import openai   # Retrieve API key from environment variable openai.api_key = os.getenv(\"OPENAI_API_KEY\") In\u00a0[\u00a0]: Copied! <pre>import os\n\nos.environ[\"OPENAI_API_KEY\"] = \"your_api_key\"\n# Make sure to replace \"your_api_key\" with your actual API key.\n</pre> import os  os.environ[\"OPENAI_API_KEY\"] = \"your_api_key\" # Make sure to replace \"your_api_key\" with your actual API key. <p>Once you have the package installed and the API key set up, you can start using the model tools to query biological models. Here's how you can get started quickly:</p> In\u00a0[106]: Copied! <pre># Import the `SearchModelsTool` class from search_models.py\nfrom aiagents4pharma.talk2biomodels.tools.search_models import SearchModelsTool\n</pre> # Import the `SearchModelsTool` class from search_models.py from aiagents4pharma.talk2biomodels.tools.search_models import SearchModelsTool <ol> <li><p>Initialize the Search Models Tool</p> <p>This creates an instance of the SearchModelsTool which you will use to search for biological models.</p> </li> </ol> In\u00a0[107]: Copied! <pre># Initialize the SearchModelsTool\nsearch_tool = SearchModelsTool()\n</pre> # Initialize the SearchModelsTool search_tool = SearchModelsTool() <ol> <li><p>Run the Search Models Tool</p> <p>In this example, we are searching for models related to Crohn's disease. You can replace the query with any disease or biological term you're interested in.</p> </li> </ol> In\u00a0[108]: Copied! <pre># Define the search query as follows\nquery = \"crohn's disease\"\n\n# Run the tool with the query\nsearch_results = search_tool.invoke(input={\"query\": query})\n</pre> # Define the search query as follows query = \"crohn's disease\"  # Run the tool with the query search_results = search_tool.invoke(input={\"query\": query}) <ol> <li><p>Display the Results</p> <p>To view the results, simply print them</p> <p>The search results will be displayed in a table format containing the Model ID, Model Name, Format, and Submission Date.</p> </li> </ol> In\u00a0[109]: Copied! <pre>print(search_results)\n</pre> print(search_results) <pre>| #  | BioModel ID                                          | BioModel Name                                                                                                   | Format | Submission Date |\n|----|------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------|--------|------------------|\n| 1  | [BIOMD0000000534](https://www.ebi.ac.uk/biomodels/BIOMD0000000534) | Dwivedi2014 - Healthy Volunteer IL6 Model                                                                     | SBML   | 2014-08-04       |\n| 2  | [BIOMD0000000535](https://www.ebi.ac.uk/biomodels/BIOMD0000000535) | Dwivedi2014 - Crohns IL6 Disease model - Anti-IL6 Antibody                                                   | SBML   | 2014-08-04       |\n| 3  | [BIOMD0000000536](https://www.ebi.ac.uk/biomodels/BIOMD0000000536) | Dwivedi2014 - Crohns IL6 Disease model - sgp130 activity                                                     | SBML   | 2014-08-04       |\n| 4  | [BIOMD0000000537](https://www.ebi.ac.uk/biomodels/BIOMD0000000537) | Dwivedi2014 - Crohns IL6 Disease model - Anti-IL6R Antibody                                                  | SBML   | 2014-08-04       |\n| 5  | [MODEL1109130000](https://www.ebi.ac.uk/biomodels/MODEL1109130000) | Thiele2013 - Human metabolism global reconstruction (Recon 2)                                                 | SBML   | 2011-09-12       |\n| 6  | [MODEL1311110000](https://www.ebi.ac.uk/biomodels/MODEL1311110000) | Smallbone2013 - Human metabolism global reconstruction (recon 2.1)                                            | SBML   | 2013-11-11       |\n| 7  | [MODEL1311110001](https://www.ebi.ac.uk/biomodels/MODEL1311110001) | Smallbone2013 - Human metabolism global reconstruction (recon 2.1x)                                           | SBML   | 2013-11-11       |\n| 8  | [MODEL1703310000](https://www.ebi.ac.uk/biomodels/MODEL1703310000) | MODEL1703310000_url.xml                                                                                       | SBML   | 2017-03-30       |\n| 9  | [MODEL2001290001](https://www.ebi.ac.uk/biomodels/MODEL2001290001) | AhmedMobeen2021 - NF-kB Activation Model                                                                       | SBML   | 2020-01-29       |\n| 10 | [MODEL2101150001](https://www.ebi.ac.uk/biomodels/MODEL2101150001) | Corral2021 - Interplay between SMAD2 and STAT5A regulating IL-17A/F expression in Th cells.                   | SBML   | 2021-01-15       |\n</pre> <ol> <li><p>Import Required Modules</p> <p>The purpose of this step is to import the necessary classes to work with biological models. The ModelDescriptionTool is used to query and retrieve information about a biological model, and ModelData is a helper class to provide the model's details like its ID or file path. These imports are essential for interacting with the tool.</p> </li> </ol> In\u00a0[110]: Copied! <pre>from aiagents4pharma.talk2biomodels.tools.model_description import ModelDescriptionTool,ModelData\n</pre> from aiagents4pharma.talk2biomodels.tools.model_description import ModelDescriptionTool,ModelData <ol> <li><p>Initialize the Tool</p> <p>This step initializes the ModelDescriptionTool, which will allow you to interact with the BioModels database. It sets up the tool to process your questions and fetch the relevant answers from the specified model.</p> </li> </ol> In\u00a0[111]: Copied! <pre>tool = ModelDescriptionTool()\n</pre> tool = ModelDescriptionTool() <ol> <li><p>Define the Model Data</p> <p>The purpose of defining the model data is to specify the biological model you want to work with. By providing the modelid, you indicate which model from the BioModels database the tool should analyze. Alternatively, you can use the sbml_file_path to load a local SBML file, but here we focus on using a BioModels ID.</p> </li> </ol> In\u00a0[112]: Copied! <pre>model_data = ModelData(\n    modelid=537,  # Use a valid BioModels ID\n    sbml_file_path=None\n)\n</pre> model_data = ModelData(     modelid=537,  # Use a valid BioModels ID     sbml_file_path=None ) <ol> <li><p>Prepare Input, Invoke the Tool, and Display the Result</p> <p>In this step, you define a question about the biological model and link it to the specified model data. The input is processed by the tool's invoke method, which retrieves the relevant information, and the response is displayed, providing a clear answer to your query</p> </li> </ol> In\u00a0[113]: Copied! <pre>input_data = {\n    \"question\": \"What biological processes does this model simulate?\",\n    \"sys_bio_model\": model_data\n}\nresponse = tool.invoke(input=input_data)\nprint(\"Response:\", response)\n</pre> input_data = {     \"question\": \"What biological processes does this model simulate?\",     \"sys_bio_model\": model_data } response = tool.invoke(input=input_data) print(\"Response:\", response)  <pre>None st_session_key\nResponse: This model simulates the interleukin-6 (IL-6)-mediated immune regulation in Crohn's disease. Specifically, it integrates intracellular signaling with organ-level dynamics of pharmacological markers underlying the disease. The model focuses on the differential activity of ligands on the signaling of IL-6, which in turn affects the Signal Transducer and Activator of Transcription 3 (STAT3) activity leading to the production of the biomarker C-Reactive Protein (CRP) expression.\n</pre> <p>As you can see, the query's answer is displayed in a clear and well-structured format.</p> <ol> <li>Import Required Packages</li> </ol> In\u00a0[114]: Copied! <pre>from aiagents4pharma.talk2biomodels.tools.simulate_model import SimulateModelTool,TimeData,SpeciesData,TimeSpeciesNameConcentration\nimport streamlit as st\n</pre> from aiagents4pharma.talk2biomodels.tools.simulate_model import SimulateModelTool,TimeData,SpeciesData,TimeSpeciesNameConcentration import streamlit as st <p>SimulateModelTool: The main tool for running model simulations.</p> <p>TimeData, SpeciesData, TimeSpeciesNameConcentration: Helper classes to define time, species, and recurring data.</p> <p>streamlit: A Python library for building web applications, used here to manage session data and visualize results.</p> <ol> <li><p>Initialize the Tool</p> <p>Create an instance of the SimulateModelTool.</p> </li> </ol> In\u00a0[115]: Copied! <pre>st.session_state[\"test_key\"] = None\n</pre>  st.session_state[\"test_key\"] = None <pre>2024-12-10 15:44:56.926 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n2024-12-10 15:44:56.929 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n</pre> <p>st.session_state: Stores data during the session. Here, we initialize it with a key (test_key) to save simulation results.</p> In\u00a0[116]: Copied! <pre>simulate_tool = SimulateModelTool(return_direct=True,st_session_key=\"test_key\")\n</pre> simulate_tool = SimulateModelTool(return_direct=True,st_session_key=\"test_key\") <p>simulate_tool: Initializes the simulation tool and links it to the Streamlit session using st_session_key.</p> <ol> <li><p>Define the Input Data</p> <p>Define the input data for the simulation in a structured format. You'll provide the model data, time data, species data, and recurring events (if any).</p> </li> </ol> In\u00a0[117]: Copied! <pre># Define time data\nmodel_data=ModelData(\n        modelid= 537,  # Use a valid BioModels ID\n        sbml_file_path=None\n)\ntime_data = TimeData(\n    duration=10.0,  # Duration of the simulation\n    interval=1000     # Interval between time steps\n)\n\n# Define species data\nspecies_data = SpeciesData(\n    species_name=[\"CRP{serum}\"],\n    species_concentration=[100.0]\n)\n\n# Define recurring data\nnew_data = [\n    TimeSpeciesNameConcentration(time=5.0, species_name=\"CRP{serum}\", species_concentration=100.0)\n]\n</pre> # Define time data model_data=ModelData(         modelid= 537,  # Use a valid BioModels ID         sbml_file_path=None ) time_data = TimeData(     duration=10.0,  # Duration of the simulation     interval=1000     # Interval between time steps )  # Define species data species_data = SpeciesData(     species_name=[\"CRP{serum}\"],     species_concentration=[100.0] )  # Define recurring data new_data = [     TimeSpeciesNameConcentration(time=5.0, species_name=\"CRP{serum}\", species_concentration=100.0) ] <p>In this simulation, we initially set the concentration of CRP[serum] to 100 at the timestamp 5.0.</p> <ol> <li><p>Run the Simulation Using invoke</p> <p>Now, run the simulation using the invoke method. This method will use the structured input data to execute the simulation.</p> </li> </ol> In\u00a0[118]: Copied! <pre>reponse = simulate_tool.invoke(input ={\n    \"model_data\": {\"modelid\" : model_data.modelid},\n    \"time_data\": {\"duration\" : time_data.duration,\n                    \"interval\" : time_data.interval},\n    \"species_data\" : {\"species_name\" : species_data.species_name,\n                    \"species_concentration\" : species_data.species_concentration},\n    \"recurring_data\"  : {\"data\": new_data}\n    })\n</pre> reponse = simulate_tool.invoke(input ={     \"model_data\": {\"modelid\" : model_data.modelid},     \"time_data\": {\"duration\" : time_data.duration,                     \"interval\" : time_data.interval},     \"species_data\" : {\"species_name\" : species_data.species_name,                     \"species_concentration\" : species_data.species_concentration},     \"recurring_data\"  : {\"data\": new_data}     }) <pre>2024-12-10 15:44:56.968 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n2024-12-10 15:44:56.971 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n2024-12-10 15:44:58.970 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n2024-12-10 15:44:58.970 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n</pre> <ol> <li><p>Display the Results</p> <p>Finally, display the simulation results in the Jupyter notebook using print.</p> </li> </ol> In\u00a0[119]: Copied! <pre>df =st.session_state[\"test_key\"].simulation_results\n# Retrieve and display simulation results from st.session_state\n</pre> df =st.session_state[\"test_key\"].simulation_results # Retrieve and display simulation results from st.session_state <pre>2024-12-10 15:44:59.312 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n</pre> In\u00a0[120]: Copied! <pre>df_ = df[[\"Time\",\"CRP[serum]\"]]\n# For example, the  rows of CRP concentration can be shown\n</pre> df_ = df[[\"Time\",\"CRP[serum]\"]] # For example, the  rows of CRP concentration can be shown In\u00a0[121]: Copied! <pre>df[(df_[\"Time\"]&gt;=5)&amp;(df_[\"Time\"]&lt;=5.05)][[\"Time\",\"CRP[serum]\"]]\n</pre> df[(df_[\"Time\"]&gt;=5)&amp;(df_[\"Time\"]&lt;=5.05)][[\"Time\",\"CRP[serum]\"]] Out[121]: Time CRP[serum] 500 5.00 200.458221 501 5.01 101.589706 502 5.02 103.145120 503 5.03 104.666835 504 5.04 106.155623 505 5.05 107.612282 <p>When we examine the results within the time range between 5.0 and 5.05, we can observe a gradual increase in the concentration values.</p> <p>This increase reflects how the concentration dynamically evolves after the timestamp 5.0 as the system resets or recalculates values for each subsequent timestep (e.g., 5.01, 5.02, etc.).</p> <ol> <li><p>Import Required Packages</p> <p>Ensure that the required package (aiagents4pharma) is installed and imported correctly.</p> </li> </ol> In\u00a0[122]: Copied! <pre>from aiagents4pharma.talk2biomodels.tools.ask_question import AskQuestionTool, AskQuestionInput\n</pre> from aiagents4pharma.talk2biomodels.tools.ask_question import AskQuestionTool, AskQuestionInput <ol> <li><p>Initialize the Tool</p> <p>Create an instance of the AskQuestionTool.</p> </li> </ol> In\u00a0[123]: Copied! <pre>ask_question_tool = AskQuestionTool(return_direct=True,st_session_key=\"test_key\")\n</pre> ask_question_tool = AskQuestionTool(return_direct=True,st_session_key=\"test_key\") <ol> <li><p>Define the Input Question</p> <p>Define the input question in the required structure.</p> </li> </ol> In\u00a0[128]: Copied! <pre># Prepare the input for invoking the tool\ninput_data = {\n    \"question\": \"What is the concentration of CRP[serum] at time 5?\",\n    \"sys_bio_model\": \"simulation_results\"\n}\n</pre> # Prepare the input for invoking the tool input_data = {     \"question\": \"What is the concentration of CRP[serum] at time 5?\",     \"sys_bio_model\": \"simulation_results\" } <ol> <li><p>Use invoke</p> <p>Now, use the invoke method to get the answer to the question.</p> </li> </ol> In\u00a0[129]: Copied! <pre># Invoke the tool and get the response\nresponse_ = ask_question_tool.invoke( input=input_data)\n</pre> # Invoke the tool and get the response response_ = ask_question_tool.invoke( input=input_data) <pre>2024-12-10 15:45:19.583 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n2024-12-10 15:45:19.586 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n2024-12-10 15:45:19.587 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n2024-12-10 15:45:19.588 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n2024-12-10 15:45:19.589 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n2024-12-10 15:45:19.590 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n2024-12-10 15:45:19.598 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n2024-12-10 15:45:19.600 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n</pre> <ol> <li><p>Display the Answer</p> <p>Finally, display the answer in the Jupyter notebook.</p> </li> </ol> In\u00a0[130]: Copied! <pre># Print the response\nprint(response_)\n</pre> # Print the response print(response_) <pre>The concentration of CRP[serum] at time 5 is 200.458221.\n</pre> In\u00a0[133]: Copied! <pre>df[(df_[\"Time\"]&gt;=5)&amp;(df_[\"Time\"]&lt;=5.05)][[\"Time\",\"CRP[serum]\"]]\n</pre> df[(df_[\"Time\"]&gt;=5)&amp;(df_[\"Time\"]&lt;=5.05)][[\"Time\",\"CRP[serum]\"]] Out[133]: Time CRP[serum] 500 5.00 200.458221 501 5.01 101.589706 502 5.02 103.145120 503 5.03 104.666835 504 5.04 106.155623 505 5.05 107.612282 <p>At the timestamp 5, the value obtained is 200.458221. Upon verification:</p> <ul> <li>The LLM's response matches this value accurately.</li> <li>The value is consistent with the corresponding entry in the dataframe (df) above.</li> </ul> <p>This alignment confirms that the model is functioning correctly, as the tool's output is validated against the simulation results.</p>"},{"location":"notebooks/talk2biomodels/tutorial/#tutorial","title":"Tutorial\u00b6","text":"<p>This tutorial will walk you through the process of getting started with the useage of different tools to operate with Systems biology models. It includes installation instructions, a quick start guide, and an overview of how to integrate and use the tool in your projects.</p>"},{"location":"notebooks/talk2biomodels/tutorial/#install-aiagents4pharma","title":"Install aiagents4pharma\u00b6","text":"<p>To begin, you need to install the aiagents4pharma package, which includes the search_models tool for querying biological models.</p> <p>Use the following command to install the package via pip:</p>"},{"location":"notebooks/talk2biomodels/tutorial/#set-up-your-api-key","title":"Set up your API key\u00b6","text":""},{"location":"notebooks/talk2biomodels/tutorial/#option-1-retrieve-api-key-from-environment-variable","title":"Option 1 : Retrieve API Key from Environment Variable\u00b6","text":""},{"location":"notebooks/talk2biomodels/tutorial/#option-2-store-api-key-directly-in-the-script-temporary","title":"Option 2: Store API Key Directly in the Script (Temporary)\u00b6","text":""},{"location":"notebooks/talk2biomodels/tutorial/#invoke-the-search_models-tool","title":"Invoke the search_models Tool\u00b6","text":"<ol> <li><p>Import Required Packages</p> <p>This imports the SearchModelsTool class from the aiagents4pharma package.</p> </li> </ol>"},{"location":"notebooks/talk2biomodels/tutorial/#invoke-the-model_description-tool","title":"Invoke the model_description tool\u00b6","text":""},{"location":"notebooks/talk2biomodels/tutorial/#invoke-the-simulate_model-tool","title":"Invoke the simulate_model tool\u00b6","text":"<p>Simulation allows us to run virtual experiments on biological systems. Instead of conducting physical experiments in the lab, we can use computational models to predict how a system behaves under specific conditions.</p> <p>Let's simulate a virtual patient with a CRP value of 100 and observe the results over time</p>"},{"location":"notebooks/talk2biomodels/tutorial/#invoke-the-ask_question-tool","title":"Invoke the ask_question tool\u00b6","text":""},{"location":"ops/CodeOps/","title":"CodeOps","text":""},{"location":"ops/CodeOps/#codeops","title":"CodeOps","text":"<p>\u2139\ufe0f Date 2024-11-02 Version 1.0</p> <ol> <li>Overview</li> <li>GitHub Repo Types</li> <li>GitHub templates for PRs, features and bugs</li> <li>Coding practices</li> <li>Testing locally</li> <li>Keywords in commit messages</li> <li>Resources</li> </ol>"},{"location":"ops/CodeOps/#overview","title":"Overview","text":"<p>Welcome to Team VPE\u2019s CodeOps document!</p> <p>This document serves as a guide to our team's approach to managing code. Your insights and feedback are highly encouraged \ud83d\ude0a. Please provide feedback via GitHub Issues. Thanks \ud83d\ude0a.</p> <p>This guide will cover the following topics relevant for our CodeOps:.</p> <p>\ud83d\uddf8 GitHub repo organization: About the organization of the repository on GitHub. \ud83d\uddf8 GitHub templates: Explains the predefined templates that are provided in a standardized format to provide details on proposed changes, new features, or bugs. \ud83d\uddf8 Coding Practices: Outlines the coding standards that we strive to follow to ensure the quality, maintainability, and consistency of our codebase. \ud83d\uddf8 Testing locally: Steps to run unit tests locally before committing your code, thereby reducing workflow failures on GitHub Actions prior to commit. \ud83d\uddf8 Keywords in Commit Messages: Specific keywords in commit messages that can trigger release on GitHub Actions. \ud83d\uddf8 Resources for Further Reading: Additional reading material.</p>"},{"location":"ops/CodeOps/#github-repo-organization","title":"GitHub Repo Organization","text":"<p>This repository is intended to be public facing, encouraging easy collaboration, and sharing within the wider community. It follows a modular structure that allows developers to focus on individual AI Agent modules or compose a complete application using all or some of the available AI Agents. Our folder structure is as follows:</p> Folder or File Description .gitignore Path to files and folders to be ignored .github/ Workflows for continuous integration (CI) and templates (Bug/Feature/PR) app/ Where the application code sits app/\\&lt;frontend or backend&gt;/src/ Code related to the client web UI or server backend, respectively app/\\&lt;frontend or backend&gt;/tests/ All pytests for the frontend or backend app/\\&lt;frontend or backend&gt;/docs/ All documentation for the frontend or backend app/\\&lt;frontend or backend&gt;/pyproject.toml List all the packages required for the front-end or backend app/\\&lt;frontend or backend&gt;/LICENSE If differing for the frontend or backend compared to the LICENSE of the repo app/\\&lt;frontend or backend&gt;/README.md Description of the frontend or backend agents/ Where the AI agents code sits agents/\\&lt;agent&gt;/src/ Code related to a particular  agents/\\&lt;agent&gt;/src/models/ All code that is specific to defining the decision making of a particular \\&lt;agent&gt; agents/\\&lt;agent&gt;/src/tools/ All code that is specific to defining functionality of tools available to a particular \\&lt;agent&gt; agents/\\&lt;agent&gt;/src/prompts/ Prompts that are specific to a particular \\&lt;agent&gt; agents/\\&lt;agent&gt;/tests/ All pytests for a particular \\&lt;agent&gt; agents/\\&lt;agent&gt;/docs/ All documentation for a particular \\&lt;agent&gt; agents/\\&lt;agent&gt;/examples/ Notebooks exemplifying how to use a particular \\&lt;agent&gt; agents/\\&lt;agent&gt;/pyproject.toml Python installation script for a particular \\&lt;agent&gt; agents/\\&lt;agent&gt;/LICENSE If differing for a particular \\&lt;agent&gt; compared to the LICENSE of the repo agents/\\&lt;agent&gt;/README.md Description of a particular \\&lt;agent&gt; docs/ Where you write .md files for MkDocs for the repository website env/ Dockerfiles or scripts for setting up a virtual environment for development or deployment node_modules Packages required by sematic-release (do not modify/delete) pyproject.toml Build script for the repository following PEP 518 LICENSE You know what it means README.md Description of your repo CONTRIBUTING.md Contributing guidelines *.yml Files that come with semantic-release and MkDocs *.json They are pre-configured *.js Modify them based on your need"},{"location":"ops/CodeOps/#github-templates-for-prs-features-and-bugs","title":"GitHub templates for PRs, features, and bugs","text":"<p>We have created three essential templates: the Pull Request (PR) template, the Feature Request template, and the Bug Report template (all present in the .github/ folder). Each serves a distinct purpose in streamlining our workflow and ensuring effective communication among team members and contributors.</p> <ol> <li>The PR template serves as a structured guide for anyone submitting a pull request. It outlines essential details such as the purpose of the changes, any associated issues or feature requests, testing instructions, and any necessary documentation updates. By adhering to this template, contributors provide comprehensive context, making the review process smoother and more efficient.</li> <li>The Feature Request template offers a standardized format for suggesting new functionalities or enhancements to our projects. It prompts users to describe the desired feature, its rationale, and any potential challenges or considerations.</li> <li>The Bug Report template assists users in reporting issues or bugs encountered within our projects. It encourages clear and concise descriptions of the problem, including steps to reproduce, expected behavior, and any relevant screenshots or error messages.</li> </ol> <p>Upon opening an issue on GitHub, users are prompted to select the appropriate template based on their specific needs\u2014whether it's a bug report, or a feature request. Likewise, when initiating a pull request, the PR template automatically loads, guiding contributors through the necessary steps to ensure thorough documentation and review of their proposed changes.</p>"},{"location":"ops/CodeOps/#coding-practices","title":"Coding practices","text":""},{"location":"ops/CodeOps/#branching-model","title":"Branching model","text":"<ol> <li>GitHub Flow</li> <li>How to use branches:<ol> <li>Tagged branches (on VPE account) for releases.</li> <li>Main branch (on VPE account) to start all Feature/Fix branches (on private account).</li> <li>Merge of Feature/Fix branches (on private account) into Main (on VPE account) following a successful PR.</li> <li>Tag the Main (on VPE accounts) for a new release.</li> </ol> </li> </ol>"},{"location":"ops/CodeOps/#unit-tests","title":"Unit Tests","text":"<ol> <li>Each class/method should have a unit test</li> <li>The tests must cover at least the following:<ol> <li>Unit testing: see PyTest</li> <li>Linting: see Pylint</li> <li>Code coverage: see Coverage</li> <li>Works on Linux, Windows, and Mac machines</li> </ol> </li> </ol> <p>NOTE: All tests must be written in the tests/ folder (this is where pytest will search by default)</p> <p>Pro-tips:   - Use the GitHub co-pilot to write docstrings (though not always accurate).   - Install PyLint on VS code to spot the linting errors on the fly.</p>"},{"location":"ops/CodeOps/#pr-policies","title":"PR policies","text":"<ol> <li>Number of approving reviewers on a PR: &gt;= 1</li> <li>Passing unit testing (pytest)</li> <li>Passing linting (pylint)</li> <li>Passing coverage (coverage)</li> </ol>"},{"location":"ops/CodeOps/#documentation-of-classes-methods-and-apis","title":"Documentation of classes, methods, and APIs","text":"<p>Use MkDocs. Refer to the DevOps guide for more details.</p>"},{"location":"ops/CodeOps/#best-practices-in-python","title":"Best practices in Python","text":"<ol> <li>Choose your preferred Python version, but ensure your repository's environment passes tests on Windows, macOS, and Linux (you should be able to test that via GitHub actions).</li> <li>Coding style -&gt; Numpy style (Style guide) for Python using Flake8</li> <li>Use modules and packages (add init.py)</li> <li>One Class per script</li> <li>Separate packages for utilities/helper functions</li> <li>Import the module, not the function (call the function by accessing the module in the code)</li> </ol> <pre><code># bad practice\nimport module1.pkg\nresult = pkg()\n</code></pre> <pre><code># good practice\nimport module1\nresult = module1.pkg()\n# You always know where the function is coming from\n# Avoids polluting the global name space\n</code></pre> <ol> <li>Readable code &gt;&gt; efficient code</li> <li>Use type hinting whenever possible</li> </ol> <pre><code>def greeting(name: str) - &gt; str:\n  return \"Hello \"+name\n</code></pre> <ol> <li>Use List comprehension whenever possible (but don't forget the KISS principle)</li> </ol> <pre><code>list = [x*2 for x in array if x &gt; 1]\n</code></pre> <ol> <li>Docstring for methods and classes</li> </ol> <pre><code>def sum(a: int, b: int) -&gt; int:\n    \"\"\"\n    Function to return sum of 2 integers\n\n    Args:\n        a: first number\n        b: second number\n\n    Returns:\n        int: sum of 2 integers\n    \"\"\"\n    return (a + b)\n</code></pre> <p>Pro-tip: Use co-pilot to automatically write a docstring for the methods/classes (though not always accurate)</p> <ol> <li>Examples: Jupyter notebook with the following <ol> <li>Clear API calls to the sources of all data to run the analysis.</li> <li>Record of all analyses and figure generation routines.</li> <li>Documentation of the analysis so that another team member could reproduce the results in your absence. \u2003</li> </ol> </li> </ol>"},{"location":"ops/CodeOps/#testing-locally","title":"Testing locally","text":"<p>To streamline our development process and save time, we've implemented a CI/CD pipeline that includes automated testing through GitHub Actions (see the DevOps document for details). Essentially, each time code is pushed to GitHub, a TESTS workflow is triggered to test the code automatically. However, running these tests on GitHub Actions can be time-consuming. To optimize efficiency and catch issues early, it's recommended to run the tests locally before committing changes to GitHub. This involves executing pytest, pylint, and coverage tests (which are the core of the TESTS workflow) locally to ensure code quality and test coverage meet our standards. Below are the commands to execute these tests locally:</p>"},{"location":"ops/CodeOps/#pytest","title":"pytest:","text":"<p>Job: test scripts in the tests/ folder Passing-criteria: pass all the tests</p> <pre><code>pytest\n</code></pre> <p>Note: Running pytest without any options can sometimes execute all the python files, including unintended ones. To avoid this, you can specify the folders you want to test. For example, running</p> <pre><code>pytest tests/\n</code></pre> <p>will execute pytest only on the tests/ folder. It is important to ensure that pytest is run on at least the app/ and agents/ folders. Additionally, if you choose to run pytest on specific folders while testing locally, you must also do the same in the workflow files for GitHub actions (see the section on Automated workflows in the DevOps guide).</p>"},{"location":"ops/CodeOps/#pylint","title":"pylint:","text":"<p>Action: lint all .py scripts in the specified folder Passing-criteria: code rating must be 10.00/10.00*</p> <pre><code>pylint app/\npylint agents/\n</code></pre> <p>Note: If you want to disable a particular warning, use the disable option in pylint. For example, running</p> <pre><code>pylint --disable=R0801,W0613 app/\npylint --disable=R0801,W0613 agents/\n</code></pre> <p>will ignore the warnings with codes R0801 and W0613. Choose to disable warnings wisely. Additionally, if you choose to disable a warning while testing locally, you must also disable it in the workflow files for GitHub Actions (see the section on Automated workflows in the DevOps guide). We have already disabled a few warnings. Please look at the tests.yml to know the warnings we have currently disabled.</p>"},{"location":"ops/CodeOps/#coverage","title":"coverage:","text":"<p>Job: makes sure every method is called at least once in the tests/ folder Passing-criteria: 100% score</p> <pre><code>coverage run \u2013m pytest agents app\ncoverage report \u2013m\n</code></pre> <p>Note: Lines to be excluded should be specified in the file .coveragerc</p>"},{"location":"ops/CodeOps/#mkdocs","title":"MkDocs:","text":"<p>Job: Hosts the documentation locally Passing-criteria: Manual assessment</p> <pre><code>mkdocs serve\n</code></pre> <p>NOTE: Please refer to the \"Unit Tests\" subsection within the \"Coding Practices\" section for further details.</p>"},{"location":"ops/CodeOps/#keywords-in-commit-messages","title":"Keywords in commit messages","text":"<p>We use semantic-release software to automate the process of versioning and releasing code on GitHub. It operates by analyzing commit messages to determine the type of changes made in the codebase. Following the Semantic Versioning convention, commonly known as SemVer, version numbers are structured as MAJOR.MINOR.PATCH. The MAJOR version is incremented for incompatible changes in the code, MINOR for feature additions, and PATCH for backward-compatible bug fixes. This automated approach ensures that version increments are consistent and meaningful, aiding developers and users in understanding the impact of updates.</p> <p>Job: Bump up the release (MAJOR.MINOR.PATCH) based on the commit message</p>"},{"location":"ops/CodeOps/#feat","title":"\u201cfeat:\u201d","text":"<p>will bump up the minor version (MINOR)</p> <pre><code>git commit \u2013m \u201cfeat: add a new feature\u201d\n</code></pre>"},{"location":"ops/CodeOps/#fix","title":"\u201cfix:\u201d","text":"<p>will bump up the patch version (PATCH)</p> <pre><code>git commit \u2013m \u201cfix: fix bug\u201d\n</code></pre>"},{"location":"ops/CodeOps/#feat-or-fix-followed-by-breaking-change","title":"\u201cfeat:\u201d or \u201cfix:\u201d followed by \u201cBREAKING CHANGE:\u201d","text":"<p>will bump up the major version (MAJOR)</p> <pre><code>git commit \u2013m \u201cfeat: add a new feature\nBREAKING CHANGE: update several features\u201d\n</code></pre>"},{"location":"ops/CodeOps/#notes","title":"Notes:","text":"<ol> <li>The first line of the commit message must begin with the keyword \u201cfeat\u201d or \u201cfix\u201d and the last line with \"BREAKING_CHANGE\" to prompt a major version bump.</li> <li>Write the commit message on GitHub when approving the merge between the 'develop' branch (on VPE account) and the 'main' branch (on VPE account), this ensures that the 'release.yml' will run using GitHub Actions. For all other cases, this commit message will not trigger any actions.\"</li> <li>The obligation of bumping up the major version lies with the reviewer.</li> </ol>"},{"location":"ops/CodeOps/#chore","title":"\u201cchore\u201d","text":"<p>triggers no action.</p> <pre><code>git commit \u2013m \u201cchore: add new example in the folder\n</code></pre> <p>Please note it is mandatory to specify keywords when merging a pull request (e.g.: merging develop into main) on GitHub that results in a release or when pushing code to GitHub that will lead to a release. In most cases the release workflow activation is linked to the keywords mentioned. Leaf through the section on \u2018How to open and close a Pull request on GitHub\u2019 in the DevOps guide to know more.</p>"},{"location":"ops/CodeOps/#resources","title":"Resources","text":"<ul> <li>Outline of working with GitHub for collaborative projects GitHub flow. Read more about: i. GitHub Actions workflows and ii. Semantic versioning</li> </ul>"},{"location":"ops/DevOps/","title":"DevOps","text":""},{"location":"ops/DevOps/#devops","title":"DevOps","text":"<p>\u2139\ufe0f Date 2024-11-02 Version 1.0</p> <ol> <li>Introduction</li> <li>Feedback and Issue Reporting</li> <li>GitHub Repo Creation Workflow</li> <li>How to open and close a Pull request (PR)</li> <li>Environment</li> <li>CI/CD pipeline</li> <li>MkDocs for Documentation</li> <li>Automated workflows for testing, documentation, and release </li> </ol>"},{"location":"ops/DevOps/#introduction","title":"Introduction","text":"<p>Welcome to Team VPE's DevOps document! This document serves as a guide to our team's approach to managing the DevOps practices within our projects. Your insights and feedback are highly encouraged \ud83d\ude0a</p> <p>\ud83d\uddf8 GitHub repo creation &amp; workflow: A table on repo operation on GitHub \ud83d\uddf8 Environment: How to create a virtual environment for your projects. \ud83d\uddf8 CI/CD pipeline: Workflow about our software development cycle. \ud83d\uddf8 MkDocs for Documentation: How we leverage MkDocs for automating the documentation process. \ud83d\uddf8 Automated Workflows with GitHub Actions: About the implementation of automated workflows using GitHub Actions, streamlining tasks such as testing, linting, code coverage, and version releases.</p>"},{"location":"ops/DevOps/#feedback-and-issue-reporting","title":"Feedback and Issue Reporting","text":"<p>For new features or bug reports in the repositories, please submit them via GitHub Issues. Thanks \ud83d\ude0a.</p>"},{"location":"ops/DevOps/#github-repo-creation-workflow","title":"GitHub Repo Creation Workflow","text":"<p>In the table, you will find step-by-step instructions on how to fork a repo from the VPE team account to your private account, and then clone it onto your local machine for coding/development purposes.</p> Step How to do? 1. Fork the repo to your private account On GitHub see forking a repository 2. Clone the forked repo to your local machine <code>git clone https://github.com/fork/repo</code>1\ufe0f\u20e3 3. Configure Git to sync your fork (i.e. private account) with the original repo (i.e. VPE account) &gt; <code>git remote add upstream https://github.com/original.git</code>1\ufe0f\u20e3&gt; <code>git remote -v</code> 4. Create new feature/fix branch &gt; <code>git checkout -b feat/&lt;feature-name&gt;</code> OR <code>git checkout -b fix/&lt;fix-name&gt;</code> 5. Add changes to the new branch and commit the changes &gt; <code>git add .</code>&gt; <code>git commit -m \u2018feat: add new changes\u2019</code> 6. Push the changes to your fork (i.e. private account) &gt; <code>git push origin feat/&lt;feat-name&gt;</code> OR<code>git push origin fix/&lt;fix-name&gt;</code> 7. Create a new pull-request (PR) on GitHub (private account) See creating a pull request. Follow the PR template.Merge \u201cfeat/fix\u201d on private account with \u201cmain\u201d on VPE account 8. Continue to make changes on your branch during code review (steps 6-8) Min 1 approving review and pass all CI tests required to merge 9a. Update your local feat/fix branch with recent changes from main branch on VPE account &gt; <code>git checkout feat/&lt;feat-name&gt;</code> OR <code>git checkout fix/&lt;fix-name&gt;</code>&gt; <code>git fetch upstream \u2013prune</code>2\ufe0f\u20e3&gt; <code>git merge upstream/feat/&lt;feat-name&gt;</code> OR <code>git merge upstream/fix/&lt;fix-name&gt;</code> 9b. Update your local main branch with recent changes from main branch on VPE account (and then create a feat/fix branch out of it) &gt; <code>git checkout main</code>&gt; <code>git fetch upstream --prune</code>&gt; <code>git merge upstream/main</code> 10. Delete the local feat/fix branch (optional) &gt; <code>git checkout main</code>&gt; <code>git branch -d feat</code> OR <code>git branch -d fix</code> <p>1\ufe0f\u20e3 Set this based on your cloning method (HTTPS or SSH) 2\ufe0f\u20e3 Typically used to update your local repository with changes from all remotes while also removing any local references to branches that have been deleted on the remote repository.</p>"},{"location":"ops/DevOps/#how-to-open-and-close-a-pull-request-pr","title":"How to open and close a Pull request (PR)","text":""},{"location":"ops/DevOps/#some-general-recommendations","title":"Some general recommendations","text":"<ol> <li>Assign a single PR to each task. Avoid including unrelated changes in the same pull request to maintain focus and clarity.</li> <li>Title and description serve as the initial means to explain the rationale behind each change.</li> <li>Clearly state the purpose and objectives of the pull request to provide context for reviewers.</li> <li>Break down changes into logically organized, bite-sized commits for easier review.</li> <li>Ensure that each commit follows consistent coding conventions and standards (see the section on Coding practices in the CodeOps guide).</li> <li>Include comprehensive test cases that cover both positive and negative scenarios (and edge/corner cases) and run them locally before creating the PR (see the section on Automated workflows for testing, documentation, and release in this guide).</li> <li>Provide documentation updates alongside code changes to keep it synchronized (see the section on MkDocs for documentation in this guide)</li> </ol>"},{"location":"ops/DevOps/#to-open-a-pr-authors-are-required-to","title":"To open a PR, authors are required to:","text":"<ol> <li>Provide a title and description of the PR.</li> <li>Make sure the change checks every item mentioned on the checklist in the PR template. If not, please specify the reasons in your PR.</li> </ol>"},{"location":"ops/DevOps/#to-close-a-pr-reviewers-are-required-to","title":"To close a PR, reviewers are required to:","text":"<ol> <li>Make sure the PR passes the automated tests (if applicable).</li> <li>Make sure every item mentioned on your checklist in the template is addressed.</li> <li>Please make sure to add a prefix (feat:/fix:/chore:) and/or a suffix BREAKING CHANGE (if it's a major release) to your commit message.</li> </ol> <p> For instance, the commit message triggers a merge followed by the automated activation of the versioning tool (semantics-release). This tool increments the minor version (e.g., 2.1.1 changes to 2.2.0). </p> <p> Another instance, the commit message triggers a merge followed by the automated activation of the versioning tool (semantics-release). This tool increments the major version (e.g., 2.1.1 changes to 3.0.0).</p> <ol> <li>If the PR closes an issue(s), please make sure to state it in your commit message. </li> </ol> <p> For instance, the commit message below triggers a merge followed by the automated activation of the versioning tool (semantics-release) and automatically closes issue #24.</p> <ol> <li>Merging into main is supposed to run an automated release workflow, please make sure to check under the Actions tab to see if the workflow has been initiated and return later to verify that it has completed successfully.</li> </ol>"},{"location":"ops/DevOps/#environment","title":"Environment","text":"<p>Here's a quick documentation on how to install a Python environment using venv:</p> <ol> <li> <p>Create a Virtual Environment:</p> <pre><code>1. Open a terminal or command prompt.\n2. Navigate to your project directory.\n3. Run the following command to create a virtual environment: `python -m venv env`\n4. This command creates a folder named `env` which contains the isolated Python environment.\n</code></pre> </li> <li> <p>Activate the Virtual Environment:</p> <pre><code>1. Activate the virtual environment by running the appropriate command based on your operating system: `.\\env\\Scripts\\activate` (Windows) `source env/bin/activate` (MacOS and Linux)\n2. After activation, you'll notice `(env)` at the beginning of your command prompt, indicating that you are now working within the virtual environment.\n</code></pre> </li> <li> <p>Install dependencies: with the virtual environment activated, you can now install Python packages without affecting the global Python installation. Install the required packages using <code>pip</code>. For example: <code>pip install package1 package2</code></p> </li> <li>Install dependencies from <code>requirements.txt</code>: <code>pip install -r requirements.txt</code></li> <li>Save dependencies to <code>requirements.txt</code> (useful when setting up a project for the first time after installing several libraries via pip): <code>pip freeze &gt; requirements.txt</code></li> </ol> <p>NOTE: By default, when you run git clone, it clones the entire repository, including all branches. However, it typically checks out the main branch after cloning. If you want to install the package from a specific branch, either simply checkout to the branch: <code>git checkout develop</code>. Or use the -b flag followed by the branch name during git clone: <code>git clone -b develop https://github.com/VirtualPatientEngine/demo.git</code>.</p> <ol> <li>Verify installation: <code>pip list</code></li> <li>Deactivate the Virtual Environment and return to the global Python environment, simply run: <code>deactivate</code></li> </ol> <p>That's it! You've successfully installed a Python environment using <code>venv</code> and recreated an existing environment from <code>requirements.txt</code>.</p>"},{"location":"ops/DevOps/#cicd-pipeline","title":"CI/CD pipeline","text":"<p>A Continuous Integration/Continuous Deployment (CI/CD) pipeline is crucial for streamlining the software development lifecycle and delivering reliable and high-quality code.</p> <p> The schema above provides an overview of the two phases of our CI/CD pipeline. It's essential to note that the CI/CD pipeline applies exclusively to code/shareable repositories.</p>"},{"location":"ops/DevOps/#development","title":"Development:","text":"<p>The process begins with developers writing and committing code to GitHub</p>"},{"location":"ops/DevOps/#github-actions","title":"GitHub Actions:","text":"<p>This phase involves: 1. Automating the setup of the environment, conducting tests, linting, and assessing code coverage. This is essential for maintaining code quality and ensuring that the code adheres to predefined standards. 2. Additionally, automatic document deployment (via MkDocs and GitHub pages) is initiated during this stage. 3. The final steps involve the release of the code through GitHub assets and wheel packages, facilitating seamless distribution of the shareable code.</p>"},{"location":"ops/DevOps/#mkdocs-for-documentation","title":"MkDocs for Documentation","text":""},{"location":"ops/DevOps/#why-mkdocs","title":"Why MkDocs?","text":"<ol> <li>MkDocs produces static pages from Markdown.</li> <li>It pulls in code documentation from docstrings using a plug-in mkdocstrings.</li> <li>Offers various themes to make your documentation look pretty.</li> <li>Host your documentation on GitHub Pages</li> <li>Automate code documentation using GitHub Actions</li> </ol>"},{"location":"ops/DevOps/#how-to-implement-mkdocs","title":"How to implement MkDocs?","text":""},{"location":"ops/DevOps/#docstrings","title":"Docstrings","text":"<p>Make sure for every method and class you define, there is a docstring (would be awesome if you specify the examples, arguments and returns in the docstring \u2013 mkdocs can fetch that info too!)</p> <pre><code>def __init__(self, gnn_model,\n               training_data,\n               validation_data\n               ) -&gt; None:\n       '''\n       Initializes the link predictor model\n\n       Args:\n           gnn_model(GCNConv): The GNN model to be used for training (GraphAutoEncoder)\n           training_data(torch_geometric.data.Data): The training data (PyG Data)\n           validation_data(torch_geometric.data.Data): The validation data (PyG Data)\n\n       Returns:\n           None\n       '''\n</code></pre> <p> The above docstring should produce the image in the documentation. </p>"},{"location":"ops/DevOps/#in-the-docs-folder","title":"In the docs/ folder:","text":"<ol> <li>Create an index.md file that contains information to be shown on the index page of the documentation.</li> <li>Next, create a markdown file for every class or set of methods you want to document.</li> <li>Within each markdown file, specify the name of the class or set of methods you want to be automatically read <code>:::folderName.module</code> e.g.: <code>:::tests.uniprot</code> where tests is a folder that contains the module uniprot.py. Note: You can also add additional text (in markdown format) in the file besides the syntax above</li> <li>Open the file mkdocs.yml Add the paths to folders that contain the python code you want to document under the plugins (\u201capp\u201d &amp; \u201ctests\u201d are added by default)</li> <li>Under nav (navigation), set <code>&lt;pageName&gt;: &lt;file.md&gt;</code> where pageName is the name of the page you\u2019d like to assign and file.md is the file you created for the corresponding class/methods in the previous step. NOTE: You'll need to create the markdown files initially to set up a template. Afterwards, you'll only need to do this again if you've added a new script file or made significant modifications.</li> </ol>"},{"location":"ops/DevOps/#to-view-it-locally","title":"To view it locally","text":"<p>run <code>&gt; mkdocs serve</code> in your terminal.</p>"},{"location":"ops/DevOps/#automated-workflows-for-testing-documentation-and-release","title":"Automated workflows for testing, documentation, and release","text":"<ul> <li>In the repository, workflows are automated, configurable processes that execute one or more jobs.</li> <li>Each workflow is defined by a YAML file located in the repository and can be triggered by an event, manually, or on a defined schedule.</li> <li>We store our workflows in the <code>.github/workflows</code> directory, consistent with the workflows described in the Testing Locally section of the CodeOps guide.\\</li> <li>These workflows are automatically triggered when a pull request (PR) is opened.</li> <li>To save resources and time, we encourage you to run them locally before opening a PR.</li> </ul>"},{"location":"ops/Documentation_intro/","title":"Introduction","text":"<p>Please check out our CodeOps and DevOps documentation to learn more about our contribution guidelines.</p>"},{"location":"talk2biomodels/models/basico_model/","title":"Basico Model","text":"<p>BasicoModel class for loading and simulating SBML models using the basico package.</p>"},{"location":"talk2biomodels/models/basico_model/#aiagents4pharma.talk2biomodels.models.basico_model.BasicoModel","title":"<code>BasicoModel</code>","text":"<p>               Bases: <code>SysBioModel</code></p> <p>Model that loads and simulates SBML models using the basico package. Can load models from an SBML file or download them using a BioModels model_id.</p> Source code in <code>aiagents4pharma/talk2biomodels/models/basico_model.py</code> <pre><code>class BasicoModel(SysBioModel):\n    \"\"\"\n    Model that loads and simulates SBML models using the basico package.\n    Can load models from an SBML file or download them using a BioModels model_id.\n    \"\"\"\n    model_id: Optional[int] = Field(None, description=\"BioModels model ID to download and load\")\n    sbml_file_path: Optional[str] = Field(None, description=\"Path to an SBML file to load\")\n    simulation_results: Optional[str] = None\n    name: Optional[str] = Field(\"\", description=\"Name of the model\")\n    description: Optional[str] = Field(\"\", description=\"Description of the model\")\n\n    # Additional attribute not included in the schema\n    copasi_model: Optional[object] = None  # Holds the loaded Copasi model\n\n    @model_validator(mode=\"after\")\n    def check_model_id_or_sbml_file_path(self):\n        \"\"\"\n        Validate that either model_id or sbml_file_path is provided.\n        \"\"\"\n        if not self.model_id and not self.sbml_file_path:\n            raise ValueError(\"Either model_id or sbml_file_path must be provided.\")\n        if self.model_id:\n            self.copasi_model = basico.load_biomodel(self.model_id)\n            self.description = basico.biomodels.get_model_info(self.model_id)[\"description\"]\n        elif self.sbml_file_path:\n            self.copasi_model = basico.load_model(self.sbml_file_path)\n        return self\n\n    def simulate(self,\n                 parameters: Optional[Dict[str, Union[float, int]]] = None,\n                 duration: Union[int, float] = 10,\n                 interval: int = 10\n                 ) -&gt; pd.DataFrame:\n        \"\"\"\n        Simulate the COPASI model over a specified range of time points.\n\n        Args:\n            parameters: Dictionary of model parameters to update before simulation.\n            duration: Duration of the simulation in time units.\n            interval: Interval between time points in the simulation.\n\n        Returns:\n            Pandas DataFrame with time-course simulation results.\n        \"\"\"\n\n        # Update parameters in the model\n        if parameters:\n            for param_name, param_value in parameters.items():\n                # check if the param_name is not None\n                if param_name is None:\n                    continue\n                # if param is a kinectic parameter\n                df_all_params = basico.model_info.get_parameters(model=self.copasi_model)\n                if param_name in df_all_params.index.tolist():\n                    basico.model_info.set_parameters(name=param_name,\n                                                exact=True,\n                                                initial_value=param_value,\n                                                model=self.copasi_model)\n                # if param is a species\n                else:\n                    basico.model_info.set_species(name=param_name,\n                                                exact=True,\n                                                initial_concentration=param_value,\n                                                model=self.copasi_model)\n\n        # Run the simulation and return results\n        df_result = basico.run_time_course(model=self.copasi_model,\n                                        intervals=interval,\n                                        duration=duration)\n        df_result.columns = df_result.columns.str.replace('{', '[', regex=False).\\\n                    str.replace('}', ']', regex=False)\n        df_result.reset_index(inplace=True)\n        self.simulation_results = df_result\n        return df_result.copy()\n\n    def get_model_metadata(self) -&gt; Dict[str, Union[str, int]]:\n        \"\"\"\n        Retrieve metadata specific to the COPASI model.\n\n        Returns:\n            Dictionary of model metadata.\n        \"\"\"\n        return {\n            \"Model Type\": \"SBML Model (COPASI)\",\n            \"Parameter Count\": len(basico.get_parameters())\n        }\n</code></pre>"},{"location":"talk2biomodels/models/basico_model/#aiagents4pharma.talk2biomodels.models.basico_model.BasicoModel.check_model_id_or_sbml_file_path","title":"<code>check_model_id_or_sbml_file_path()</code>","text":"<p>Validate that either model_id or sbml_file_path is provided.</p> Source code in <code>aiagents4pharma/talk2biomodels/models/basico_model.py</code> <pre><code>@model_validator(mode=\"after\")\ndef check_model_id_or_sbml_file_path(self):\n    \"\"\"\n    Validate that either model_id or sbml_file_path is provided.\n    \"\"\"\n    if not self.model_id and not self.sbml_file_path:\n        raise ValueError(\"Either model_id or sbml_file_path must be provided.\")\n    if self.model_id:\n        self.copasi_model = basico.load_biomodel(self.model_id)\n        self.description = basico.biomodels.get_model_info(self.model_id)[\"description\"]\n    elif self.sbml_file_path:\n        self.copasi_model = basico.load_model(self.sbml_file_path)\n    return self\n</code></pre>"},{"location":"talk2biomodels/models/basico_model/#aiagents4pharma.talk2biomodels.models.basico_model.BasicoModel.get_model_metadata","title":"<code>get_model_metadata()</code>","text":"<p>Retrieve metadata specific to the COPASI model.</p> <p>Returns:</p> Type Description <code>Dict[str, Union[str, int]]</code> <p>Dictionary of model metadata.</p> Source code in <code>aiagents4pharma/talk2biomodels/models/basico_model.py</code> <pre><code>def get_model_metadata(self) -&gt; Dict[str, Union[str, int]]:\n    \"\"\"\n    Retrieve metadata specific to the COPASI model.\n\n    Returns:\n        Dictionary of model metadata.\n    \"\"\"\n    return {\n        \"Model Type\": \"SBML Model (COPASI)\",\n        \"Parameter Count\": len(basico.get_parameters())\n    }\n</code></pre>"},{"location":"talk2biomodels/models/basico_model/#aiagents4pharma.talk2biomodels.models.basico_model.BasicoModel.simulate","title":"<code>simulate(parameters=None, duration=10, interval=10)</code>","text":"<p>Simulate the COPASI model over a specified range of time points.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>Optional[Dict[str, Union[float, int]]]</code> <p>Dictionary of model parameters to update before simulation.</p> <code>None</code> <code>duration</code> <code>Union[int, float]</code> <p>Duration of the simulation in time units.</p> <code>10</code> <code>interval</code> <code>int</code> <p>Interval between time points in the simulation.</p> <code>10</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>Pandas DataFrame with time-course simulation results.</p> Source code in <code>aiagents4pharma/talk2biomodels/models/basico_model.py</code> <pre><code>def simulate(self,\n             parameters: Optional[Dict[str, Union[float, int]]] = None,\n             duration: Union[int, float] = 10,\n             interval: int = 10\n             ) -&gt; pd.DataFrame:\n    \"\"\"\n    Simulate the COPASI model over a specified range of time points.\n\n    Args:\n        parameters: Dictionary of model parameters to update before simulation.\n        duration: Duration of the simulation in time units.\n        interval: Interval between time points in the simulation.\n\n    Returns:\n        Pandas DataFrame with time-course simulation results.\n    \"\"\"\n\n    # Update parameters in the model\n    if parameters:\n        for param_name, param_value in parameters.items():\n            # check if the param_name is not None\n            if param_name is None:\n                continue\n            # if param is a kinectic parameter\n            df_all_params = basico.model_info.get_parameters(model=self.copasi_model)\n            if param_name in df_all_params.index.tolist():\n                basico.model_info.set_parameters(name=param_name,\n                                            exact=True,\n                                            initial_value=param_value,\n                                            model=self.copasi_model)\n            # if param is a species\n            else:\n                basico.model_info.set_species(name=param_name,\n                                            exact=True,\n                                            initial_concentration=param_value,\n                                            model=self.copasi_model)\n\n    # Run the simulation and return results\n    df_result = basico.run_time_course(model=self.copasi_model,\n                                    intervals=interval,\n                                    duration=duration)\n    df_result.columns = df_result.columns.str.replace('{', '[', regex=False).\\\n                str.replace('}', ']', regex=False)\n    df_result.reset_index(inplace=True)\n    self.simulation_results = df_result\n    return df_result.copy()\n</code></pre>"},{"location":"talk2biomodels/models/intro/","title":"Talk2BioModels","text":"<p>Talk2BioModels is an AI-agent designed to interact with mathematical models in systems biology. You can choose to either interact with a model available in the BioModels database or upload your own model.</p>"},{"location":"talk2biomodels/models/intro/#why-talk2biomodels","title":"Why Talk2BioModels?","text":"<p>Biological models are critical for understanding complex biological mechanisms, yet they often remain inaccessible to those without a programming or mathematical background. Talk2BioModels bridges this gap by offering:</p> <ul> <li>Natural Language Interaction: Simulate or ask questions to mathematical models directly.</li> <li>Streamlined Simulations: Forward simulation of both internal and open-source models (e.g., BioModels database).</li> <li>Dynamic Adjustments: Modify model parameters to simulate diverse conditions.</li> <li>Powerful Queries: Effortlessly retrieve and analyze simulation results.</li> </ul>"},{"location":"talk2biomodels/models/intro/#how-to-access-talk2biomodels","title":"How to access Talk2BioModels?","text":"<p>There are 2 ways to access Talk2BioModels:</p> <ul> <li>Set up the Streamlit app: Follow the instructions on the home page to set up an launch the Streamlit app.</li> <li>Use the PyPI package: Follow the tutorial for step-by-step guidance on how to use the PyPI package.</li> </ul>"},{"location":"talk2biomodels/models/sys_bio_model/","title":"System Bio Model","text":"<p>An abstract base class for BioModels in the BioModels repository.</p>"},{"location":"talk2biomodels/models/sys_bio_model/#aiagents4pharma.talk2biomodels.models.sys_bio_model.SysBioModel","title":"<code>SysBioModel</code>","text":"<p>               Bases: <code>ABC</code>, <code>BaseModel</code></p> <p>Abstract base class for BioModels in the BioModels repository. This class serves as a general structure for models, allowing different mathematical approaches to be implemented in subclasses.</p> Source code in <code>aiagents4pharma/talk2biomodels/models/sys_bio_model.py</code> <pre><code>class SysBioModel(ABC, BaseModel):\n    \"\"\"\n    Abstract base class for BioModels in the BioModels repository.\n    This class serves as a general structure for models, allowing\n    different mathematical approaches to be implemented in subclasses.\n    \"\"\"\n    model_id: Optional[int] = Field(None, description=\"BioModel ID of the model\")\n    sbml_file_path: Optional[str] = Field(None, description=\"Path to an SBML file\")\n    name: Optional[str] = Field(..., description=\"Name of the model\")\n    description: Optional[str] = Field(\"\", description=\"Description of the model\")\n\n    @model_validator(mode=\"after\")\n    def check_model_id_or_sbml_file_path(self):\n        \"\"\"\n        Validate that either model_id or sbml_file_path is provided.\n        \"\"\"\n        if not self.model_id and not self.sbml_file_path:\n            raise ValueError(\"Either model_id or sbml_file_path must be provided.\")\n        return self\n\n    @abstractmethod\n    def get_model_metadata(self) -&gt; Dict[str, Union[str, int]]:\n        \"\"\"\n        Abstract method to retrieve metadata of the model.\n        This method should return a dictionary containing model metadata.\n\n        Returns:\n            dict: Dictionary with model metadata\n        \"\"\"\n\n    @abstractmethod\n    def simulate(self,\n                 parameters: Dict[str, Union[float, int]],\n                 duration: Union[int, float]) -&gt; List[float]:\n        \"\"\"\n        Abstract method to run a simulation of the model.\n        This method should be implemented to simulate model \n        behavior based on the provided parameters.\n\n        Args:\n            parameters: Dictionary of parameter values.\n            duration: Duration of the simulation.\n\n        Returns:\n            list: List of simulation results.\n        \"\"\"\n</code></pre>"},{"location":"talk2biomodels/models/sys_bio_model/#aiagents4pharma.talk2biomodels.models.sys_bio_model.SysBioModel.check_model_id_or_sbml_file_path","title":"<code>check_model_id_or_sbml_file_path()</code>","text":"<p>Validate that either model_id or sbml_file_path is provided.</p> Source code in <code>aiagents4pharma/talk2biomodels/models/sys_bio_model.py</code> <pre><code>@model_validator(mode=\"after\")\ndef check_model_id_or_sbml_file_path(self):\n    \"\"\"\n    Validate that either model_id or sbml_file_path is provided.\n    \"\"\"\n    if not self.model_id and not self.sbml_file_path:\n        raise ValueError(\"Either model_id or sbml_file_path must be provided.\")\n    return self\n</code></pre>"},{"location":"talk2biomodels/models/sys_bio_model/#aiagents4pharma.talk2biomodels.models.sys_bio_model.SysBioModel.get_model_metadata","title":"<code>get_model_metadata()</code>  <code>abstractmethod</code>","text":"<p>Abstract method to retrieve metadata of the model. This method should return a dictionary containing model metadata.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>Dict[str, Union[str, int]]</code> <p>Dictionary with model metadata</p> Source code in <code>aiagents4pharma/talk2biomodels/models/sys_bio_model.py</code> <pre><code>@abstractmethod\ndef get_model_metadata(self) -&gt; Dict[str, Union[str, int]]:\n    \"\"\"\n    Abstract method to retrieve metadata of the model.\n    This method should return a dictionary containing model metadata.\n\n    Returns:\n        dict: Dictionary with model metadata\n    \"\"\"\n</code></pre>"},{"location":"talk2biomodels/models/sys_bio_model/#aiagents4pharma.talk2biomodels.models.sys_bio_model.SysBioModel.simulate","title":"<code>simulate(parameters, duration)</code>  <code>abstractmethod</code>","text":"<p>Abstract method to run a simulation of the model. This method should be implemented to simulate model  behavior based on the provided parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>Dict[str, Union[float, int]]</code> <p>Dictionary of parameter values.</p> required <code>duration</code> <code>Union[int, float]</code> <p>Duration of the simulation.</p> required <p>Returns:</p> Name Type Description <code>list</code> <code>List[float]</code> <p>List of simulation results.</p> Source code in <code>aiagents4pharma/talk2biomodels/models/sys_bio_model.py</code> <pre><code>@abstractmethod\ndef simulate(self,\n             parameters: Dict[str, Union[float, int]],\n             duration: Union[int, float]) -&gt; List[float]:\n    \"\"\"\n    Abstract method to run a simulation of the model.\n    This method should be implemented to simulate model \n    behavior based on the provided parameters.\n\n    Args:\n        parameters: Dictionary of parameter values.\n        duration: Duration of the simulation.\n\n    Returns:\n        list: List of simulation results.\n    \"\"\"\n</code></pre>"},{"location":"talk2biomodels/tools/ask_question/","title":"Ask questions","text":"<p>Tool for asking a question about the simulation results.</p>"},{"location":"talk2biomodels/tools/ask_question/#aiagents4pharma.talk2biomodels.tools.ask_question.AskQuestionInput","title":"<code>AskQuestionInput</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Input schema for the AskQuestion tool.</p> Source code in <code>aiagents4pharma/talk2biomodels/tools/ask_question.py</code> <pre><code>class AskQuestionInput(BaseModel):\n    \"\"\"\n    Input schema for the AskQuestion tool.\n    \"\"\"\n    question: str = Field(description=\"question about the simulation results\")\n</code></pre>"},{"location":"talk2biomodels/tools/ask_question/#aiagents4pharma.talk2biomodels.tools.ask_question.AskQuestionTool","title":"<code>AskQuestionTool</code>","text":"<p>               Bases: <code>BaseTool</code></p> <p>Tool for calculating the product of two numbers.</p> Source code in <code>aiagents4pharma/talk2biomodels/tools/ask_question.py</code> <pre><code>class AskQuestionTool(BaseTool):\n    \"\"\"\n    Tool for calculating the product of two numbers.\n    \"\"\"\n    name: str = \"ask_question\"\n    description: str = \"A tool to ask question about the simulation results.\"\n    args_schema: Type[BaseModel] = AskQuestionInput\n    return_direct: bool = True\n    st_session_key: str = None\n    sys_bio_model: ModelData = ModelData()\n\n    def _run(self,\n             question: str,\n             run_manager: Optional[CallbackManagerForToolRun] = None) -&gt; str:\n        \"\"\"\n        Run the tool.\n\n        Args:\n            question (str): The question to ask about the simulation results.\n            run_manager (Optional[CallbackManagerForToolRun]): The CallbackManagerForToolRun object.\n\n        Returns:\n            str: The answer to the question.\n        \"\"\"\n        st_session_key = self.st_session_key\n        sys_bio_model = self.sys_bio_model\n        # Check if sys_bio_model is provided in the input\n        if sys_bio_model.modelid or sys_bio_model.sbml_file_path or sys_bio_model.model_object:\n            if sys_bio_model.modelid is not None:\n                model_object = BasicoModel(model_id=sys_bio_model.modelid)\n            elif sys_bio_model.sbml_file_path is not None:\n                model_object = BasicoModel(sbml_file_path=sys_bio_model.sbml_file_path)\n            else:\n                model_object = sys_bio_model.model_object\n        else:\n            # If the sys_bio_model is not provided in the input,\n            # get it from the Streamlit session state\n            if st_session_key:\n                if st_session_key not in st.session_state:\n                    return f\"Session key {st_session_key} not found in Streamlit session state.\"\n                model_object = st.session_state[st_session_key]\n            else:\n                return \"Please provide a valid model object or \\\n                    Streamlit session key that contains the model object.\"\n        # Update the object in the streamlit session state\n        if st_session_key:\n            st.session_state[st_session_key] = model_object\n        if model_object.simulation_results is None:\n            model_object.simulate()\n        df = model_object.simulation_results\n        # If there is a Streamlit session key,\n        # display the simulation results\n        if st_session_key:\n            st.text(f\"Simulation Results of the model {model_object.model_id}\")\n            st.dataframe(df, use_container_width = False, width = 650)\n        # Check if run_manager's metadata has the key 'prompt_content'\n        prompt_content = None\n        if run_manager and 'prompt' in run_manager.metadata:\n            prompt_content = run_manager.metadata['prompt']\n        # Create a pandas dataframe agent with OpenAI\n        df_agent = create_pandas_dataframe_agent(ChatOpenAI(model=\"gpt-3.5-turbo\"),\n                                                  allow_dangerous_code=True,\n                                                  agent_type=AgentType.OPENAI_FUNCTIONS,\n                                                  df=df,\n                                                  prefix=prompt_content)\n        llm_result = df_agent.invoke(question)\n        return llm_result[\"output\"]\n\n    def get_metadata(self):\n        \"\"\"\n        Get metadata for the tool.\n\n        Returns:\n            dict: The metadata for the tool.\n        \"\"\"\n        return {\n            \"name\": self.name,\n            \"description\": self.description\n        }\n</code></pre>"},{"location":"talk2biomodels/tools/ask_question/#aiagents4pharma.talk2biomodels.tools.ask_question.AskQuestionTool._run","title":"<code>_run(question, run_manager=None)</code>","text":"<p>Run the tool.</p> <p>Parameters:</p> Name Type Description Default <code>question</code> <code>str</code> <p>The question to ask about the simulation results.</p> required <code>run_manager</code> <code>Optional[CallbackManagerForToolRun]</code> <p>The CallbackManagerForToolRun object.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The answer to the question.</p> Source code in <code>aiagents4pharma/talk2biomodels/tools/ask_question.py</code> <pre><code>def _run(self,\n         question: str,\n         run_manager: Optional[CallbackManagerForToolRun] = None) -&gt; str:\n    \"\"\"\n    Run the tool.\n\n    Args:\n        question (str): The question to ask about the simulation results.\n        run_manager (Optional[CallbackManagerForToolRun]): The CallbackManagerForToolRun object.\n\n    Returns:\n        str: The answer to the question.\n    \"\"\"\n    st_session_key = self.st_session_key\n    sys_bio_model = self.sys_bio_model\n    # Check if sys_bio_model is provided in the input\n    if sys_bio_model.modelid or sys_bio_model.sbml_file_path or sys_bio_model.model_object:\n        if sys_bio_model.modelid is not None:\n            model_object = BasicoModel(model_id=sys_bio_model.modelid)\n        elif sys_bio_model.sbml_file_path is not None:\n            model_object = BasicoModel(sbml_file_path=sys_bio_model.sbml_file_path)\n        else:\n            model_object = sys_bio_model.model_object\n    else:\n        # If the sys_bio_model is not provided in the input,\n        # get it from the Streamlit session state\n        if st_session_key:\n            if st_session_key not in st.session_state:\n                return f\"Session key {st_session_key} not found in Streamlit session state.\"\n            model_object = st.session_state[st_session_key]\n        else:\n            return \"Please provide a valid model object or \\\n                Streamlit session key that contains the model object.\"\n    # Update the object in the streamlit session state\n    if st_session_key:\n        st.session_state[st_session_key] = model_object\n    if model_object.simulation_results is None:\n        model_object.simulate()\n    df = model_object.simulation_results\n    # If there is a Streamlit session key,\n    # display the simulation results\n    if st_session_key:\n        st.text(f\"Simulation Results of the model {model_object.model_id}\")\n        st.dataframe(df, use_container_width = False, width = 650)\n    # Check if run_manager's metadata has the key 'prompt_content'\n    prompt_content = None\n    if run_manager and 'prompt' in run_manager.metadata:\n        prompt_content = run_manager.metadata['prompt']\n    # Create a pandas dataframe agent with OpenAI\n    df_agent = create_pandas_dataframe_agent(ChatOpenAI(model=\"gpt-3.5-turbo\"),\n                                              allow_dangerous_code=True,\n                                              agent_type=AgentType.OPENAI_FUNCTIONS,\n                                              df=df,\n                                              prefix=prompt_content)\n    llm_result = df_agent.invoke(question)\n    return llm_result[\"output\"]\n</code></pre>"},{"location":"talk2biomodels/tools/ask_question/#aiagents4pharma.talk2biomodels.tools.ask_question.AskQuestionTool.get_metadata","title":"<code>get_metadata()</code>","text":"<p>Get metadata for the tool.</p> <p>Returns:</p> Name Type Description <code>dict</code> <p>The metadata for the tool.</p> Source code in <code>aiagents4pharma/talk2biomodels/tools/ask_question.py</code> <pre><code>def get_metadata(self):\n    \"\"\"\n    Get metadata for the tool.\n\n    Returns:\n        dict: The metadata for the tool.\n    \"\"\"\n    return {\n        \"name\": self.name,\n        \"description\": self.description\n    }\n</code></pre>"},{"location":"talk2biomodels/tools/ask_question/#aiagents4pharma.talk2biomodels.tools.ask_question.ModelData","title":"<code>ModelData</code>  <code>dataclass</code>","text":"<p>Dataclass for storing the model data.</p> Source code in <code>aiagents4pharma/talk2biomodels/tools/ask_question.py</code> <pre><code>@dataclass\nclass ModelData:\n    \"\"\"\n    Dataclass for storing the model data.\n    \"\"\"\n    modelid: Optional[int] = None\n    sbml_file_path: Optional[str] = None\n    model_object: Optional[BasicoModel] = None\n</code></pre>"},{"location":"talk2biomodels/tools/custom_plotter/","title":"Custom figures","text":"<p>Tool for plotting a custom figure.</p>"},{"location":"talk2biomodels/tools/custom_plotter/#aiagents4pharma.talk2biomodels.tools.custom_plotter.CustomHeader","title":"<code>CustomHeader</code>","text":"<p>               Bases: <code>TypedDict</code></p> <p>A list of headers extracted from the user question.</p> Source code in <code>aiagents4pharma/talk2biomodels/tools/custom_plotter.py</code> <pre><code>class CustomHeader(TypedDict):\n    \"\"\"\n    A list of headers extracted from the user question.\n    \"\"\"\n    y: List[str]\n</code></pre>"},{"location":"talk2biomodels/tools/custom_plotter/#aiagents4pharma.talk2biomodels.tools.custom_plotter.CustomPlotterInput","title":"<code>CustomPlotterInput</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Input schema for the PlotImage tool.</p> Source code in <code>aiagents4pharma/talk2biomodels/tools/custom_plotter.py</code> <pre><code>class CustomPlotterInput(BaseModel):\n    \"\"\"\n    Input schema for the PlotImage tool.\n    \"\"\"\n    question: str = Field(description=\"Description of the plot\")\n</code></pre>"},{"location":"talk2biomodels/tools/custom_plotter/#aiagents4pharma.talk2biomodels.tools.custom_plotter.CustomPlotterTool","title":"<code>CustomPlotterTool</code>","text":"<p>               Bases: <code>BaseTool</code></p> <p>Tool for plotting a custom plot.</p> Source code in <code>aiagents4pharma/talk2biomodels/tools/custom_plotter.py</code> <pre><code>class CustomPlotterTool(BaseTool):\n    \"\"\"\n    Tool for plotting a custom plot.\n    \"\"\"\n    name: str = \"custom_plotter\"\n    description: str = \"A tool to plot or visualize the simulation results.\"\n    args_schema: Type[BaseModel] = CustomPlotterInput\n    st_session_key: str = None\n\n    def _run(self, question: str) -&gt; str:\n        \"\"\"\n        Run the tool.\n\n        Args:\n            question (str): The question to ask about the model description.\n\n        Returns:\n            str: The answer to the question\n        \"\"\"\n        # Check if sys_bio_model is provided\n        model_object = st.session_state[self.st_session_key]\n        if model_object is None:\n            return \"Please run the simulation first before plotting the figure.\"\n        if model_object.simulation_results is None:\n            return \"Please run the simulation first before plotting the figure.\"\n        df = model_object.simulation_results\n        species_names = \"\\n\".join(df.columns.tolist())\n        llm = ChatOpenAI(model=\"gpt-4o\")\n        system = f\"\"\"\n        Given the user question: {question},\n        and the species: {species_names},\n        which species are relevant to the user's question?\n        \"\"\"\n        llm_with_structured_output = llm.with_structured_output(CustomHeader)\n        system_prompt_structured_output = ChatPromptTemplate.from_template(system)\n        chain = system_prompt_structured_output | llm_with_structured_output\n        results = chain.invoke({\"input\": question})\n        logger.info(\"Suggestions: %s\", results)\n        extracted_species = []\n        for species in results['y']:\n            if species in df.columns.tolist():\n                extracted_species.append(species)\n        logger.info(\"Extracted species: %s\", extracted_species)\n        st.session_state.custom_simulation_results = extracted_species\n        if len(extracted_species) == 0:\n            return \"No species found in the simulation results that matches the user prompt.\"\n        return \"Plotted the figure using the following species: \" + str(extracted_species)\n</code></pre>"},{"location":"talk2biomodels/tools/custom_plotter/#aiagents4pharma.talk2biomodels.tools.custom_plotter.CustomPlotterTool._run","title":"<code>_run(question)</code>","text":"<p>Run the tool.</p> <p>Parameters:</p> Name Type Description Default <code>question</code> <code>str</code> <p>The question to ask about the model description.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The answer to the question</p> Source code in <code>aiagents4pharma/talk2biomodels/tools/custom_plotter.py</code> <pre><code>def _run(self, question: str) -&gt; str:\n    \"\"\"\n    Run the tool.\n\n    Args:\n        question (str): The question to ask about the model description.\n\n    Returns:\n        str: The answer to the question\n    \"\"\"\n    # Check if sys_bio_model is provided\n    model_object = st.session_state[self.st_session_key]\n    if model_object is None:\n        return \"Please run the simulation first before plotting the figure.\"\n    if model_object.simulation_results is None:\n        return \"Please run the simulation first before plotting the figure.\"\n    df = model_object.simulation_results\n    species_names = \"\\n\".join(df.columns.tolist())\n    llm = ChatOpenAI(model=\"gpt-4o\")\n    system = f\"\"\"\n    Given the user question: {question},\n    and the species: {species_names},\n    which species are relevant to the user's question?\n    \"\"\"\n    llm_with_structured_output = llm.with_structured_output(CustomHeader)\n    system_prompt_structured_output = ChatPromptTemplate.from_template(system)\n    chain = system_prompt_structured_output | llm_with_structured_output\n    results = chain.invoke({\"input\": question})\n    logger.info(\"Suggestions: %s\", results)\n    extracted_species = []\n    for species in results['y']:\n        if species in df.columns.tolist():\n            extracted_species.append(species)\n    logger.info(\"Extracted species: %s\", extracted_species)\n    st.session_state.custom_simulation_results = extracted_species\n    if len(extracted_species) == 0:\n        return \"No species found in the simulation results that matches the user prompt.\"\n    return \"Plotted the figure using the following species: \" + str(extracted_species)\n</code></pre>"},{"location":"talk2biomodels/tools/fetch_parameters/","title":"Fetch parameters","text":"<p>Tool for fetching species and parameters from the model.</p>"},{"location":"talk2biomodels/tools/fetch_parameters/#aiagents4pharma.talk2biomodels.tools.fetch_parameters.FetchParametersInput","title":"<code>FetchParametersInput</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Input schema for the ResetModel tool.</p> Source code in <code>aiagents4pharma/talk2biomodels/tools/fetch_parameters.py</code> <pre><code>class FetchParametersInput(BaseModel):\n    \"\"\"\n    Input schema for the ResetModel tool.\n    \"\"\"\n    fetch_species: bool = Field(description=\"Fetch species from the model.\")\n    fetch_parameters: bool = Field(description=\"Fetch parameters from the model.\")\n</code></pre>"},{"location":"talk2biomodels/tools/fetch_parameters/#aiagents4pharma.talk2biomodels.tools.fetch_parameters.FetchParametersTool","title":"<code>FetchParametersTool</code>","text":"<p>               Bases: <code>BaseTool</code></p> <p>This tool fetches species and parameters from the model  and returns them as a string in a dictionary.</p> Source code in <code>aiagents4pharma/talk2biomodels/tools/fetch_parameters.py</code> <pre><code>class FetchParametersTool(BaseTool):\n    \"\"\"\n    This tool fetches species and parameters from the model \n    and returns them as a string in a dictionary.\n    \"\"\"\n    name: str = \"fetch_parameters\"\n    description: str = \"A tool for fetching species and parameters from the model.\"\n    args_schema: Type[BaseModel] = FetchParametersInput\n    st_session_key: str = None\n\n    def _run(self,\n             fetch_species: bool,\n             fetch_parameters: bool\n             ) -&gt; str:\n        \"\"\"\n        Run the tool.\n\n        Args:\n            fetch_species (bool): Fetch species from the model.\n            fetch_parameters (bool): Fetch parameters from the model.\n\n        Returns:\n            dict: The species and parameters from the model.\n        \"\"\"\n        model_obj = st.session_state[self.st_session_key]\n        # Extract species from the model\n        species = []\n        if fetch_species:\n            df_species = basico.model_info.get_species(model=model_obj.copasi_model)\n            species = df_species.index.tolist()\n            species = ','.join(species)\n\n        # Extract parameters from the model\n        parameters = []\n        if fetch_parameters:\n            df_parameters = basico.model_info.get_parameters(model=model_obj.copasi_model)\n            parameters = df_parameters.index.tolist()\n            parameters = ','.join(parameters)\n        return {'Species': species, 'Parameters': parameters}\n</code></pre>"},{"location":"talk2biomodels/tools/fetch_parameters/#aiagents4pharma.talk2biomodels.tools.fetch_parameters.FetchParametersTool._run","title":"<code>_run(fetch_species, fetch_parameters)</code>","text":"<p>Run the tool.</p> <p>Parameters:</p> Name Type Description Default <code>fetch_species</code> <code>bool</code> <p>Fetch species from the model.</p> required <code>fetch_parameters</code> <code>bool</code> <p>Fetch parameters from the model.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>str</code> <p>The species and parameters from the model.</p> Source code in <code>aiagents4pharma/talk2biomodels/tools/fetch_parameters.py</code> <pre><code>def _run(self,\n         fetch_species: bool,\n         fetch_parameters: bool\n         ) -&gt; str:\n    \"\"\"\n    Run the tool.\n\n    Args:\n        fetch_species (bool): Fetch species from the model.\n        fetch_parameters (bool): Fetch parameters from the model.\n\n    Returns:\n        dict: The species and parameters from the model.\n    \"\"\"\n    model_obj = st.session_state[self.st_session_key]\n    # Extract species from the model\n    species = []\n    if fetch_species:\n        df_species = basico.model_info.get_species(model=model_obj.copasi_model)\n        species = df_species.index.tolist()\n        species = ','.join(species)\n\n    # Extract parameters from the model\n    parameters = []\n    if fetch_parameters:\n        df_parameters = basico.model_info.get_parameters(model=model_obj.copasi_model)\n        parameters = df_parameters.index.tolist()\n        parameters = ','.join(parameters)\n    return {'Species': species, 'Parameters': parameters}\n</code></pre>"},{"location":"talk2biomodels/tools/model_description/","title":"Model description","text":"<p>Tool for asking a question about the model description.</p>"},{"location":"talk2biomodels/tools/model_description/#aiagents4pharma.talk2biomodels.tools.model_description.ModelData","title":"<code>ModelData</code>  <code>dataclass</code>","text":"<p>Dataclass for storing the model data.</p> Source code in <code>aiagents4pharma/talk2biomodels/tools/model_description.py</code> <pre><code>@dataclass\nclass ModelData:\n    \"\"\"\n    Dataclass for storing the model data.\n    \"\"\"\n    model_id: Optional[int] = None\n    sbml_file_path: Optional[str] = None\n    model_object: Optional[BasicoModel] = None\n\n    # Check if model_object is an instance of BasicoModel\n    # otherwise make it None. This is important because\n    # sometimes the LLM may invoke the tool with an\n    # inappropriate model_object.\n    @model_validator(mode=\"before\")\n    @classmethod\n    def check_model_object(cls, data):\n        \"\"\"\n        Check if model_object is an instance of BasicoModel.\n        \"\"\"\n        if 'model_object' in data:\n            if not isinstance(data['model_object'], BasicoModel):\n                data['model_object'] = None\n        return data\n</code></pre>"},{"location":"talk2biomodels/tools/model_description/#aiagents4pharma.talk2biomodels.tools.model_description.ModelData.check_model_object","title":"<code>check_model_object(data)</code>  <code>classmethod</code>","text":"<p>Check if model_object is an instance of BasicoModel.</p> Source code in <code>aiagents4pharma/talk2biomodels/tools/model_description.py</code> <pre><code>@model_validator(mode=\"before\")\n@classmethod\ndef check_model_object(cls, data):\n    \"\"\"\n    Check if model_object is an instance of BasicoModel.\n    \"\"\"\n    if 'model_object' in data:\n        if not isinstance(data['model_object'], BasicoModel):\n            data['model_object'] = None\n    return data\n</code></pre>"},{"location":"talk2biomodels/tools/model_description/#aiagents4pharma.talk2biomodels.tools.model_description.ModelDescriptionInput","title":"<code>ModelDescriptionInput</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Input schema for the ModelDescription tool.</p> Source code in <code>aiagents4pharma/talk2biomodels/tools/model_description.py</code> <pre><code>class ModelDescriptionInput(BaseModel):\n    \"\"\"\n    Input schema for the ModelDescription tool.\n    \"\"\"\n    question: str = Field(description=\"question about the model description\")\n    sys_bio_model: ModelData = Field(description=\"model data\", default=None)\n</code></pre>"},{"location":"talk2biomodels/tools/model_description/#aiagents4pharma.talk2biomodels.tools.model_description.ModelDescriptionTool","title":"<code>ModelDescriptionTool</code>","text":"<p>               Bases: <code>BaseTool</code></p> <p>Tool for returning the description of the specified BioModel.</p> Source code in <code>aiagents4pharma/talk2biomodels/tools/model_description.py</code> <pre><code>class ModelDescriptionTool(BaseTool):\n    \"\"\"\n    Tool for returning the description of the specified BioModel.\n    \"\"\"\n    name: str = \"model_description\"\n    description: str = '''A tool to ask about the description of the model.'''\n    args_schema: Type[BaseModel] = ModelDescriptionInput\n    return_direct: bool = True\n    st_session_key: str = None\n\n    def _run(self,\n             question: str,\n             sys_bio_model: ModelData = ModelData(),\n             run_manager: Optional[CallbackManagerForToolRun] = None) -&gt; str:\n        \"\"\"\n        Run the tool.\n\n        Args:\n            question (str): The question to ask about the model description.\n            run_manager (Optional[CallbackManagerForToolRun]): The CallbackManagerForToolRun object.\n\n        Returns:\n            str: The answer to the question.\n        \"\"\"\n        st_session_key = self.st_session_key\n        # Check if sys_bio_model is provided in the input schema\n        if sys_bio_model.model_id or sys_bio_model.sbml_file_path \\\n            or sys_bio_model.model_object not in [None, \"\", {}]:\n            if sys_bio_model.model_id:\n                model_object = BasicoModel(model_id=sys_bio_model.model_id)\n            elif sys_bio_model.sbml_file_path:\n                model_object = BasicoModel(sbml_file_path=sys_bio_model.sbml_file_path)\n            else:\n                print (sys_bio_model.model_object, 'model_object')\n                model_object = sys_bio_model.model_object\n            if st_session_key:\n                st.session_state[st_session_key] = model_object\n        # Check if sys_bio_model is provided in the Streamlit session state\n        elif st_session_key:\n            if st_session_key not in st.session_state:\n                return f\"Session key {st_session_key} \" \\\n                        \"not found in Streamlit session state.\"\n            model_object = st.session_state[st_session_key]\n        else:\n            return \"Please provide a valid model object or Streamlit \"\\\n                \"session key that contains the model object.\"\n        # check if model_object is None\n        if model_object is None:\n            return \"Please provide a BioModels ID or an SBML file path for the model.\"\n        description = model_object.description\n        if description in [None, \"\"]:\n            return \"No description found for the model.\"\n        # Append the BioModel ID of the model to the description\n        description = f\"{description} (BioModel ID: {model_object.model_id})\"\n        llm = ChatOpenAI(model=\"gpt-3.5-turbo\")\n        # Check if run_manager's metadata has the key 'prompt_content'\n        if run_manager and 'prompt' in run_manager.metadata:\n            prompt_content = run_manager.metadata['prompt']\n        else:\n            prompt_content = '''\n                            Given the description of a System biology model:\n                            {description},\n                            answer the user question:\n                            {question}.\n                            '''\n        prompt_template = ChatPromptTemplate.from_messages(\n            [(\"system\", prompt_content),\n             (\"user\", \"{description} {question}\")]\n        )\n        parser = StrOutputParser()\n        chain = prompt_template | llm | parser\n        return chain.invoke({\"description\": description,\n                             \"question\": question})\n\n    def get_metadata(self):\n        \"\"\"\n        Get metadata for the tool.\n\n        Returns:\n            dict: The metadata for the tool.\n        \"\"\"\n        return {\n            \"name\": self.name,\n            \"description\": self.description\n        }\n</code></pre>"},{"location":"talk2biomodels/tools/model_description/#aiagents4pharma.talk2biomodels.tools.model_description.ModelDescriptionTool._run","title":"<code>_run(question, sys_bio_model=ModelData(), run_manager=None)</code>","text":"<p>Run the tool.</p> <p>Parameters:</p> Name Type Description Default <code>question</code> <code>str</code> <p>The question to ask about the model description.</p> required <code>run_manager</code> <code>Optional[CallbackManagerForToolRun]</code> <p>The CallbackManagerForToolRun object.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The answer to the question.</p> Source code in <code>aiagents4pharma/talk2biomodels/tools/model_description.py</code> <pre><code>def _run(self,\n         question: str,\n         sys_bio_model: ModelData = ModelData(),\n         run_manager: Optional[CallbackManagerForToolRun] = None) -&gt; str:\n    \"\"\"\n    Run the tool.\n\n    Args:\n        question (str): The question to ask about the model description.\n        run_manager (Optional[CallbackManagerForToolRun]): The CallbackManagerForToolRun object.\n\n    Returns:\n        str: The answer to the question.\n    \"\"\"\n    st_session_key = self.st_session_key\n    # Check if sys_bio_model is provided in the input schema\n    if sys_bio_model.model_id or sys_bio_model.sbml_file_path \\\n        or sys_bio_model.model_object not in [None, \"\", {}]:\n        if sys_bio_model.model_id:\n            model_object = BasicoModel(model_id=sys_bio_model.model_id)\n        elif sys_bio_model.sbml_file_path:\n            model_object = BasicoModel(sbml_file_path=sys_bio_model.sbml_file_path)\n        else:\n            print (sys_bio_model.model_object, 'model_object')\n            model_object = sys_bio_model.model_object\n        if st_session_key:\n            st.session_state[st_session_key] = model_object\n    # Check if sys_bio_model is provided in the Streamlit session state\n    elif st_session_key:\n        if st_session_key not in st.session_state:\n            return f\"Session key {st_session_key} \" \\\n                    \"not found in Streamlit session state.\"\n        model_object = st.session_state[st_session_key]\n    else:\n        return \"Please provide a valid model object or Streamlit \"\\\n            \"session key that contains the model object.\"\n    # check if model_object is None\n    if model_object is None:\n        return \"Please provide a BioModels ID or an SBML file path for the model.\"\n    description = model_object.description\n    if description in [None, \"\"]:\n        return \"No description found for the model.\"\n    # Append the BioModel ID of the model to the description\n    description = f\"{description} (BioModel ID: {model_object.model_id})\"\n    llm = ChatOpenAI(model=\"gpt-3.5-turbo\")\n    # Check if run_manager's metadata has the key 'prompt_content'\n    if run_manager and 'prompt' in run_manager.metadata:\n        prompt_content = run_manager.metadata['prompt']\n    else:\n        prompt_content = '''\n                        Given the description of a System biology model:\n                        {description},\n                        answer the user question:\n                        {question}.\n                        '''\n    prompt_template = ChatPromptTemplate.from_messages(\n        [(\"system\", prompt_content),\n         (\"user\", \"{description} {question}\")]\n    )\n    parser = StrOutputParser()\n    chain = prompt_template | llm | parser\n    return chain.invoke({\"description\": description,\n                         \"question\": question})\n</code></pre>"},{"location":"talk2biomodels/tools/model_description/#aiagents4pharma.talk2biomodels.tools.model_description.ModelDescriptionTool.get_metadata","title":"<code>get_metadata()</code>","text":"<p>Get metadata for the tool.</p> <p>Returns:</p> Name Type Description <code>dict</code> <p>The metadata for the tool.</p> Source code in <code>aiagents4pharma/talk2biomodels/tools/model_description.py</code> <pre><code>def get_metadata(self):\n    \"\"\"\n    Get metadata for the tool.\n\n    Returns:\n        dict: The metadata for the tool.\n    \"\"\"\n    return {\n        \"name\": self.name,\n        \"description\": self.description\n    }\n</code></pre>"},{"location":"talk2biomodels/tools/plot_figure/","title":"Plot figure","text":"<p>Tool for plotting a figure.</p>"},{"location":"talk2biomodels/tools/plot_figure/#aiagents4pharma.talk2biomodels.tools.plot_figure.ModelData","title":"<code>ModelData</code>  <code>dataclass</code>","text":"<p>Dataclass for storing the model data.</p> Source code in <code>aiagents4pharma/talk2biomodels/tools/plot_figure.py</code> <pre><code>@dataclass\nclass ModelData:\n    \"\"\"\n    Dataclass for storing the model data.\n    \"\"\"\n    modelid: Optional[int] = None\n    sbml_file_path: Optional[str] = None\n    model_object: Optional[BasicoModel] = None\n</code></pre>"},{"location":"talk2biomodels/tools/plot_figure/#aiagents4pharma.talk2biomodels.tools.plot_figure.PlotImageInput","title":"<code>PlotImageInput</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Input schema for the PlotImage tool.</p> Source code in <code>aiagents4pharma/talk2biomodels/tools/plot_figure.py</code> <pre><code>class PlotImageInput(BaseModel):\n    \"\"\"\n    Input schema for the PlotImage tool.\n    \"\"\"\n    question: str = Field(description=\"Description of the plot\")\n    sys_bio_model: ModelData = Field(description=\"model data\", default=None)\n</code></pre>"},{"location":"talk2biomodels/tools/plot_figure/#aiagents4pharma.talk2biomodels.tools.plot_figure.PlotImageTool","title":"<code>PlotImageTool</code>","text":"<p>               Bases: <code>BaseTool</code></p> <p>Tool for plotting a figure.</p> Source code in <code>aiagents4pharma/talk2biomodels/tools/plot_figure.py</code> <pre><code>class PlotImageTool(BaseTool):\n    \"\"\"\n    Tool for plotting a figure.\n    \"\"\"\n    name: str = \"plot_figure\"\n    description: str = \"A tool to plot or visualize the simulation results.\"\n    args_schema: Type[BaseModel] = PlotImageInput\n    st_session_key: str = None\n\n    def _run(self,\n             question: str,\n             sys_bio_model: ModelData = ModelData()) -&gt; str:\n        \"\"\"\n        Run the tool.\n\n        Args:\n            question (str): The question to ask about the model description.\n            sys_bio_model (ModelData): The model data.\n\n        Returns:\n            str: The answer to the question\n        \"\"\"\n        st_session_key = self.st_session_key\n        # Check if sys_bio_model is provided\n        if sys_bio_model.modelid or sys_bio_model.sbml_file_path or sys_bio_model.model_object:\n            if sys_bio_model.modelid:\n                model_object = BasicoModel(model_id=sys_bio_model.modelid)\n            elif sys_bio_model.sbml_file_path:\n                model_object = BasicoModel(sbml_file_path=sys_bio_model.sbml_file_path)\n            else:\n                model_object = sys_bio_model.model_object\n            if st_session_key:\n                st.session_state[st_session_key] = model_object\n        else:\n            # If the model_object is not provided,\n            # get it from the Streamlit session state\n            if st_session_key:\n                if st_session_key not in st.session_state:\n                    return f\"Session key {st_session_key} not found in Streamlit session state.\"\n                model_object = st.session_state[st_session_key]\n            else:\n                return \"Please provide a valid model object or \\\n                    Streamlit session key that contains the model object.\"\n        if model_object is None:\n            return \"Please run the simulation first before plotting the figure.\"\n        if model_object.simulation_results is None:\n            model_object.simulate()\n        df = model_object.simulation_results\n        tool = PythonAstREPLTool(locals={\"df\": df})\n        llm = ChatOpenAI(model=\"gpt-3.5-turbo\")\n        llm_with_tools = llm.bind_tools([tool], tool_choice=tool.name)\n        system = f\"\"\"\n                    You have access to a pandas dataframe `df`.\n                    Here is the output of `df.head().to_markdown()`:\n                    {df.head().to_markdown()}\n                    Given a user question, write the Python code to\n                    plot a figure of the answer using matplolib.\n                    Return ONLY the valid Python code and nothing else.\n                    The firgure size should be equal or smaller than (2, 2).\n                    Show the grid and legend. The font size of the legend should be 6.\n                    Also write a suitable title for the figure. The font size of the title should be 8.\n                    The font size of the x-axis and y-axis labels should be 8.\n                    The font size of the x-axis and y-axis ticks should be 6.\n                    Make sure that the x-axis has at least 10 tick marks.\n                    Use color-blind friendly colors. The figure must be of high quality.\n                    Don't assume you have access to any libraries other\n                    than built-in Python ones, pandas, streamlit and matplotlib.\n                    \"\"\"\n        prompt = ChatPromptTemplate.from_messages([(\"system\", system), (\"human\", \"{question}\")])\n        parser = JsonOutputKeyToolsParser(key_name=tool.name, first_tool_only=True)\n        code_chain = prompt | llm_with_tools | parser\n        response = code_chain.invoke({\"question\": question})\n        exec(response['query'], globals(), {\"df\": df, \"plt\": plt})\n        # load for plotly\n        fig = plt.gcf()\n        if st_session_key:\n            st.pyplot(fig, use_container_width=False)\n            st.dataframe(df)\n        return \"Figure plotted successfully\"\n\n    def call_run(self,\n            question: str,\n            sys_bio_model: ModelData = ModelData(),\n            st_session_key: str = None) -&gt; str:\n        \"\"\"\n        Run the tool.\n        \"\"\"\n        return self._run(question=question,\n                         sys_bio_model=sys_bio_model,\n                         st_session_key=st_session_key)\n\n    def get_metadata(self):\n        \"\"\"\n        Get metadata for the tool.\n        \"\"\"\n        return {\n            \"name\": self.name,\n            \"description\": self.description\n        }\n</code></pre>"},{"location":"talk2biomodels/tools/plot_figure/#aiagents4pharma.talk2biomodels.tools.plot_figure.PlotImageTool._run","title":"<code>_run(question, sys_bio_model=ModelData())</code>","text":"<p>Run the tool.</p> <p>Parameters:</p> Name Type Description Default <code>question</code> <code>str</code> <p>The question to ask about the model description.</p> required <code>sys_bio_model</code> <code>ModelData</code> <p>The model data.</p> <code>ModelData()</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The answer to the question</p> Source code in <code>aiagents4pharma/talk2biomodels/tools/plot_figure.py</code> <pre><code>def _run(self,\n         question: str,\n         sys_bio_model: ModelData = ModelData()) -&gt; str:\n    \"\"\"\n    Run the tool.\n\n    Args:\n        question (str): The question to ask about the model description.\n        sys_bio_model (ModelData): The model data.\n\n    Returns:\n        str: The answer to the question\n    \"\"\"\n    st_session_key = self.st_session_key\n    # Check if sys_bio_model is provided\n    if sys_bio_model.modelid or sys_bio_model.sbml_file_path or sys_bio_model.model_object:\n        if sys_bio_model.modelid:\n            model_object = BasicoModel(model_id=sys_bio_model.modelid)\n        elif sys_bio_model.sbml_file_path:\n            model_object = BasicoModel(sbml_file_path=sys_bio_model.sbml_file_path)\n        else:\n            model_object = sys_bio_model.model_object\n        if st_session_key:\n            st.session_state[st_session_key] = model_object\n    else:\n        # If the model_object is not provided,\n        # get it from the Streamlit session state\n        if st_session_key:\n            if st_session_key not in st.session_state:\n                return f\"Session key {st_session_key} not found in Streamlit session state.\"\n            model_object = st.session_state[st_session_key]\n        else:\n            return \"Please provide a valid model object or \\\n                Streamlit session key that contains the model object.\"\n    if model_object is None:\n        return \"Please run the simulation first before plotting the figure.\"\n    if model_object.simulation_results is None:\n        model_object.simulate()\n    df = model_object.simulation_results\n    tool = PythonAstREPLTool(locals={\"df\": df})\n    llm = ChatOpenAI(model=\"gpt-3.5-turbo\")\n    llm_with_tools = llm.bind_tools([tool], tool_choice=tool.name)\n    system = f\"\"\"\n                You have access to a pandas dataframe `df`.\n                Here is the output of `df.head().to_markdown()`:\n                {df.head().to_markdown()}\n                Given a user question, write the Python code to\n                plot a figure of the answer using matplolib.\n                Return ONLY the valid Python code and nothing else.\n                The firgure size should be equal or smaller than (2, 2).\n                Show the grid and legend. The font size of the legend should be 6.\n                Also write a suitable title for the figure. The font size of the title should be 8.\n                The font size of the x-axis and y-axis labels should be 8.\n                The font size of the x-axis and y-axis ticks should be 6.\n                Make sure that the x-axis has at least 10 tick marks.\n                Use color-blind friendly colors. The figure must be of high quality.\n                Don't assume you have access to any libraries other\n                than built-in Python ones, pandas, streamlit and matplotlib.\n                \"\"\"\n    prompt = ChatPromptTemplate.from_messages([(\"system\", system), (\"human\", \"{question}\")])\n    parser = JsonOutputKeyToolsParser(key_name=tool.name, first_tool_only=True)\n    code_chain = prompt | llm_with_tools | parser\n    response = code_chain.invoke({\"question\": question})\n    exec(response['query'], globals(), {\"df\": df, \"plt\": plt})\n    # load for plotly\n    fig = plt.gcf()\n    if st_session_key:\n        st.pyplot(fig, use_container_width=False)\n        st.dataframe(df)\n    return \"Figure plotted successfully\"\n</code></pre>"},{"location":"talk2biomodels/tools/plot_figure/#aiagents4pharma.talk2biomodels.tools.plot_figure.PlotImageTool.call_run","title":"<code>call_run(question, sys_bio_model=ModelData(), st_session_key=None)</code>","text":"<p>Run the tool.</p> Source code in <code>aiagents4pharma/talk2biomodels/tools/plot_figure.py</code> <pre><code>def call_run(self,\n        question: str,\n        sys_bio_model: ModelData = ModelData(),\n        st_session_key: str = None) -&gt; str:\n    \"\"\"\n    Run the tool.\n    \"\"\"\n    return self._run(question=question,\n                     sys_bio_model=sys_bio_model,\n                     st_session_key=st_session_key)\n</code></pre>"},{"location":"talk2biomodels/tools/plot_figure/#aiagents4pharma.talk2biomodels.tools.plot_figure.PlotImageTool.get_metadata","title":"<code>get_metadata()</code>","text":"<p>Get metadata for the tool.</p> Source code in <code>aiagents4pharma/talk2biomodels/tools/plot_figure.py</code> <pre><code>def get_metadata(self):\n    \"\"\"\n    Get metadata for the tool.\n    \"\"\"\n    return {\n        \"name\": self.name,\n        \"description\": self.description\n    }\n</code></pre>"},{"location":"talk2biomodels/tools/search_models/","title":"Search models","text":"<p>Tool for searching models based on search query.</p>"},{"location":"talk2biomodels/tools/search_models/#aiagents4pharma.talk2biomodels.tools.search_models.SearchModelsInput","title":"<code>SearchModelsInput</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Input schema for the search models tool.</p> Source code in <code>aiagents4pharma/talk2biomodels/tools/search_models.py</code> <pre><code>class SearchModelsInput(BaseModel):\n    \"\"\"\n    Input schema for the search models tool.\n    \"\"\"\n    query: str = Field(description=\"Search models query\", default=None)\n</code></pre>"},{"location":"talk2biomodels/tools/search_models/#aiagents4pharma.talk2biomodels.tools.search_models.SearchModelsTool","title":"<code>SearchModelsTool</code>","text":"<p>               Bases: <code>BaseTool</code></p> <p>Tool for returning the search results based on the search query.</p> Source code in <code>aiagents4pharma/talk2biomodels/tools/search_models.py</code> <pre><code>class SearchModelsTool(BaseTool):\n    \"\"\"\n    Tool for returning the search results based on the search query.\n    \"\"\"\n    name: str = \"search_models\"\n    description: str = \"Search models based on search query.\"\n    args_schema: Type[BaseModel] = SearchModelsInput\n    return_direct: bool = True\n\n    def _run(self, query: str) -&gt; str:\n        \"\"\"\n        Run the tool.\n\n        Args:\n            query (str): The search query.\n\n        Returns:\n            str: The answer to the question.\n        \"\"\"\n        search_results = biomodels.search_for_model(query)\n        llm = ChatOpenAI(model=\"gpt-4o-mini\")\n        # Check if run_manager's metadata has the key 'prompt_content'\n        prompt_content = f'''\n                        Convert the input into a table.\n\n                        The table must contain the following columns:\n                        - #\n                        - BioModel ID\n                        - BioModel Name\n                        - Format\n                        - Submission Date\n\n                        Additional Guidelines:\n                        - The column # must contain the row number starting from 1.\n                        - Embed the url for each BioModel ID in the table \n                        in the first column in the markdown format.\n                        - The Submission Date must be in the format YYYY-MM-DD.\n\n                        Input:\n                        {input}.\n                        '''\n        prompt_template = ChatPromptTemplate.from_messages(\n            [(\"system\", prompt_content),\n             (\"user\", \"{input}\")]\n        )\n        parser = StrOutputParser()\n        chain = prompt_template | llm | parser\n        return chain.invoke({\"input\": search_results})\n\n    def get_metadata(self):\n        \"\"\"\n        Get metadata for the tool.\n\n        Returns:\n            dict: The metadata for the tool.\n        \"\"\"\n        return {\n            \"name\": self.name,\n            \"description\": self.description\n        }\n</code></pre>"},{"location":"talk2biomodels/tools/search_models/#aiagents4pharma.talk2biomodels.tools.search_models.SearchModelsTool._run","title":"<code>_run(query)</code>","text":"<p>Run the tool.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>The search query.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The answer to the question.</p> Source code in <code>aiagents4pharma/talk2biomodels/tools/search_models.py</code> <pre><code>def _run(self, query: str) -&gt; str:\n    \"\"\"\n    Run the tool.\n\n    Args:\n        query (str): The search query.\n\n    Returns:\n        str: The answer to the question.\n    \"\"\"\n    search_results = biomodels.search_for_model(query)\n    llm = ChatOpenAI(model=\"gpt-4o-mini\")\n    # Check if run_manager's metadata has the key 'prompt_content'\n    prompt_content = f'''\n                    Convert the input into a table.\n\n                    The table must contain the following columns:\n                    - #\n                    - BioModel ID\n                    - BioModel Name\n                    - Format\n                    - Submission Date\n\n                    Additional Guidelines:\n                    - The column # must contain the row number starting from 1.\n                    - Embed the url for each BioModel ID in the table \n                    in the first column in the markdown format.\n                    - The Submission Date must be in the format YYYY-MM-DD.\n\n                    Input:\n                    {input}.\n                    '''\n    prompt_template = ChatPromptTemplate.from_messages(\n        [(\"system\", prompt_content),\n         (\"user\", \"{input}\")]\n    )\n    parser = StrOutputParser()\n    chain = prompt_template | llm | parser\n    return chain.invoke({\"input\": search_results})\n</code></pre>"},{"location":"talk2biomodels/tools/search_models/#aiagents4pharma.talk2biomodels.tools.search_models.SearchModelsTool.get_metadata","title":"<code>get_metadata()</code>","text":"<p>Get metadata for the tool.</p> <p>Returns:</p> Name Type Description <code>dict</code> <p>The metadata for the tool.</p> Source code in <code>aiagents4pharma/talk2biomodels/tools/search_models.py</code> <pre><code>def get_metadata(self):\n    \"\"\"\n    Get metadata for the tool.\n\n    Returns:\n        dict: The metadata for the tool.\n    \"\"\"\n    return {\n        \"name\": self.name,\n        \"description\": self.description\n    }\n</code></pre>"},{"location":"talk2biomodels/tools/simulate_model/","title":"Simulate model","text":"<p>Tool for simulating a model.</p>"},{"location":"talk2biomodels/tools/simulate_model/#aiagents4pharma.talk2biomodels.tools.simulate_model.ModelData","title":"<code>ModelData</code>  <code>dataclass</code>","text":"<p>Dataclass for storing the model data.</p> Source code in <code>aiagents4pharma/talk2biomodels/tools/simulate_model.py</code> <pre><code>@dataclass\nclass ModelData:\n    \"\"\"\n    Dataclass for storing the model data.\n    \"\"\"\n    modelid: Optional[int] = None\n    sbml_file_path: Optional[str] = None\n</code></pre>"},{"location":"talk2biomodels/tools/simulate_model/#aiagents4pharma.talk2biomodels.tools.simulate_model.RecurringData","title":"<code>RecurringData</code>  <code>dataclass</code>","text":"<p>Dataclass for storing the species and time data  on recurring basis.</p> Source code in <code>aiagents4pharma/talk2biomodels/tools/simulate_model.py</code> <pre><code>@dataclass\nclass RecurringData:\n    \"\"\"\n    Dataclass for storing the species and time data \n    on recurring basis.\n    \"\"\"\n    data: List[TimeSpeciesNameConcentration] = None\n</code></pre>"},{"location":"talk2biomodels/tools/simulate_model/#aiagents4pharma.talk2biomodels.tools.simulate_model.SimulateModelInput","title":"<code>SimulateModelInput</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Input schema for the SimulateModel tool.</p> Source code in <code>aiagents4pharma/talk2biomodels/tools/simulate_model.py</code> <pre><code>class SimulateModelInput(BaseModel):\n    \"\"\"\n    Input schema for the SimulateModel tool.\n    \"\"\"\n    model_data: ModelData = Field(description=\"model data\", default=None)\n    time_data: TimeData = Field(description=\"time data\", default=None)\n    species_data: SpeciesData = Field(description=\"species data\", default=None)\n    recurring_data: RecurringData = Field(description=\"recurring data\", default=None)\n</code></pre>"},{"location":"talk2biomodels/tools/simulate_model/#aiagents4pharma.talk2biomodels.tools.simulate_model.SimulateModelTool","title":"<code>SimulateModelTool</code>","text":"<p>               Bases: <code>BaseTool</code></p> <p>Tool for simulating a model.</p> Source code in <code>aiagents4pharma/talk2biomodels/tools/simulate_model.py</code> <pre><code>class SimulateModelTool(BaseTool):\n    \"\"\"\n    Tool for simulating a model.\n    \"\"\"\n    name: str = \"simulate_model\"\n    description: str = \"A tool to simulate a model.\"\n    args_schema: Type[BaseModel] = SimulateModelInput\n    st_session_key: str = None\n\n    def _run(self,\n                model_data: ModelData = None,\n                time_data: TimeData = None,\n                species_data: SpeciesData = None,\n                recurring_data: RecurringData = None):\n        \"\"\"\n        Run the tool.\n\n        Args:\n            model_data (Optional[ModelData]): The model data.\n            time_data (Optional[TimeData]): The time data.\n            species_data (Optional[SpeciesData]): The species data.\n            recurring_data (Optional[RecurringData]): The recurring data.\n\n        Returns:\n            str: The result of the simulation.\n        \"\"\"\n        st_session_key = self.st_session_key\n        # Retrieve the model ID, duration, and interval\n        modelid = model_data.modelid if model_data is not None else None\n        duration = time_data.duration if time_data is not None else 100.0\n        interval = time_data.interval if time_data is not None else 10\n        # Prepare the dictionary of species data\n        # that will be passed to the simulate method\n        # of the BasicoModel class\n        dic_species_data = None\n        if species_data is not None:\n            dic_species_data = dict(zip(species_data.species_name,\n                                    species_data.species_concentration))\n        # Retrieve the SBML file path from the Streamlit session state\n        # otherwise retrieve it from the model_data object if the user\n        # has provided it.\n        sbml_file_path = model_data.sbml_file_path if model_data is not None else None\n        if st_session_key:\n            if st_session_key not in st.session_state:\n                return f\"Session key {st_session_key} not found in Streamlit session state.\"\n            if 'sbml_file_path' in st.session_state:\n                sbml_file_path = st.session_state.sbml_file_path\n        # Check if both modelid and sbml_file_path are None\n        if modelid is None and sbml_file_path is None:\n            # Then load the model from the Streamlit session state\n            # if the streamlit session exists\n            if st_session_key:\n                model_object = st.session_state[st_session_key]\n                # If this model object is None, then return an error message\n                if model_object is None:\n                    return \"Please provide a BioModels ID or an SBML file path for simulation.\"\n                # Retrieve the model ID from the model object\n                modelid = model_object.model_id\n            else:\n                # Otherwise return an error message\n                return \"Please provide a BioModels ID or an SBML file path for simulation.\"\n        elif modelid:\n            # Create a BasicoModel object with the model ID\n            # model_object = BasicoModel(model_id=modelid)\n            model_object = BasicoModel(model_id=modelid)\n            # Save the model object in the Streamlit session state\n            st.session_state[st_session_key] = model_object\n        elif sbml_file_path:\n            # Create a BasicoModel object with the SBML file path\n            model_object = BasicoModel(sbml_file_path=sbml_file_path)\n            modelid = model_object.model_id\n            # Save the model object in the Streamlit session state\n            st.session_state[st_session_key] = model_object\n        # Add recurring events (if any) to the model\n        if recurring_data is not None:\n            for row in recurring_data.data:\n                tp, sn, sc = row.time, row.species_name, row.species_concentration\n                basico.add_event(f'{sn}_{tp}',\n                                 f'Time &gt; {tp}',\n                                 [[sn, str(sc)]],\n                                 model=model_object.copasi_model)\n                # print (f'Added event {sn}_{tp} at time {tp} \\\n                #        for species {sn} with concentration {sc}')\n        # Simulate the model\n        df = model_object.simulate(parameters=dic_species_data,\n                                    duration=duration,\n                                    interval=interval)\n        # Convert the DataFrame to long format for plotting\n        # and ignore the index column\n        df = df.melt(id_vars='Time',\n                    var_name='Species',\n                    value_name='Concentration')\n        # Plot the simulation results using Plotly\n        fig = px.line(df,\n                        x='Time',\n                        y='Concentration',\n                        color='Species',\n                        title=f\"Concentration of Species over Time in the model {modelid}\",\n                        height=600,\n                        width=800\n        )\n        # Display the plot in Streamlit\n        # st.plotly_chart(fig, use_container_width = False)\n        if modelid is None:\n            modelid = \"internal\"\n        content = f\"Simulation results for the model {modelid}.\"\n        return content\n\n    def get_metadata(self):\n        \"\"\"\n        Get metadata for the tool.\n\n        Returns:\n            dict: The metadata for the tool.\n        \"\"\"\n        return {\n            \"name\": self.name,\n            \"description\": self.description,\n            \"return_direct\": self.return_direct,\n        }\n</code></pre>"},{"location":"talk2biomodels/tools/simulate_model/#aiagents4pharma.talk2biomodels.tools.simulate_model.SimulateModelTool._run","title":"<code>_run(model_data=None, time_data=None, species_data=None, recurring_data=None)</code>","text":"<p>Run the tool.</p> <p>Parameters:</p> Name Type Description Default <code>model_data</code> <code>Optional[ModelData]</code> <p>The model data.</p> <code>None</code> <code>time_data</code> <code>Optional[TimeData]</code> <p>The time data.</p> <code>None</code> <code>species_data</code> <code>Optional[SpeciesData]</code> <p>The species data.</p> <code>None</code> <code>recurring_data</code> <code>Optional[RecurringData]</code> <p>The recurring data.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <p>The result of the simulation.</p> Source code in <code>aiagents4pharma/talk2biomodels/tools/simulate_model.py</code> <pre><code>def _run(self,\n            model_data: ModelData = None,\n            time_data: TimeData = None,\n            species_data: SpeciesData = None,\n            recurring_data: RecurringData = None):\n    \"\"\"\n    Run the tool.\n\n    Args:\n        model_data (Optional[ModelData]): The model data.\n        time_data (Optional[TimeData]): The time data.\n        species_data (Optional[SpeciesData]): The species data.\n        recurring_data (Optional[RecurringData]): The recurring data.\n\n    Returns:\n        str: The result of the simulation.\n    \"\"\"\n    st_session_key = self.st_session_key\n    # Retrieve the model ID, duration, and interval\n    modelid = model_data.modelid if model_data is not None else None\n    duration = time_data.duration if time_data is not None else 100.0\n    interval = time_data.interval if time_data is not None else 10\n    # Prepare the dictionary of species data\n    # that will be passed to the simulate method\n    # of the BasicoModel class\n    dic_species_data = None\n    if species_data is not None:\n        dic_species_data = dict(zip(species_data.species_name,\n                                species_data.species_concentration))\n    # Retrieve the SBML file path from the Streamlit session state\n    # otherwise retrieve it from the model_data object if the user\n    # has provided it.\n    sbml_file_path = model_data.sbml_file_path if model_data is not None else None\n    if st_session_key:\n        if st_session_key not in st.session_state:\n            return f\"Session key {st_session_key} not found in Streamlit session state.\"\n        if 'sbml_file_path' in st.session_state:\n            sbml_file_path = st.session_state.sbml_file_path\n    # Check if both modelid and sbml_file_path are None\n    if modelid is None and sbml_file_path is None:\n        # Then load the model from the Streamlit session state\n        # if the streamlit session exists\n        if st_session_key:\n            model_object = st.session_state[st_session_key]\n            # If this model object is None, then return an error message\n            if model_object is None:\n                return \"Please provide a BioModels ID or an SBML file path for simulation.\"\n            # Retrieve the model ID from the model object\n            modelid = model_object.model_id\n        else:\n            # Otherwise return an error message\n            return \"Please provide a BioModels ID or an SBML file path for simulation.\"\n    elif modelid:\n        # Create a BasicoModel object with the model ID\n        # model_object = BasicoModel(model_id=modelid)\n        model_object = BasicoModel(model_id=modelid)\n        # Save the model object in the Streamlit session state\n        st.session_state[st_session_key] = model_object\n    elif sbml_file_path:\n        # Create a BasicoModel object with the SBML file path\n        model_object = BasicoModel(sbml_file_path=sbml_file_path)\n        modelid = model_object.model_id\n        # Save the model object in the Streamlit session state\n        st.session_state[st_session_key] = model_object\n    # Add recurring events (if any) to the model\n    if recurring_data is not None:\n        for row in recurring_data.data:\n            tp, sn, sc = row.time, row.species_name, row.species_concentration\n            basico.add_event(f'{sn}_{tp}',\n                             f'Time &gt; {tp}',\n                             [[sn, str(sc)]],\n                             model=model_object.copasi_model)\n            # print (f'Added event {sn}_{tp} at time {tp} \\\n            #        for species {sn} with concentration {sc}')\n    # Simulate the model\n    df = model_object.simulate(parameters=dic_species_data,\n                                duration=duration,\n                                interval=interval)\n    # Convert the DataFrame to long format for plotting\n    # and ignore the index column\n    df = df.melt(id_vars='Time',\n                var_name='Species',\n                value_name='Concentration')\n    # Plot the simulation results using Plotly\n    fig = px.line(df,\n                    x='Time',\n                    y='Concentration',\n                    color='Species',\n                    title=f\"Concentration of Species over Time in the model {modelid}\",\n                    height=600,\n                    width=800\n    )\n    # Display the plot in Streamlit\n    # st.plotly_chart(fig, use_container_width = False)\n    if modelid is None:\n        modelid = \"internal\"\n    content = f\"Simulation results for the model {modelid}.\"\n    return content\n</code></pre>"},{"location":"talk2biomodels/tools/simulate_model/#aiagents4pharma.talk2biomodels.tools.simulate_model.SimulateModelTool.get_metadata","title":"<code>get_metadata()</code>","text":"<p>Get metadata for the tool.</p> <p>Returns:</p> Name Type Description <code>dict</code> <p>The metadata for the tool.</p> Source code in <code>aiagents4pharma/talk2biomodels/tools/simulate_model.py</code> <pre><code>def get_metadata(self):\n    \"\"\"\n    Get metadata for the tool.\n\n    Returns:\n        dict: The metadata for the tool.\n    \"\"\"\n    return {\n        \"name\": self.name,\n        \"description\": self.description,\n        \"return_direct\": self.return_direct,\n    }\n</code></pre>"},{"location":"talk2biomodels/tools/simulate_model/#aiagents4pharma.talk2biomodels.tools.simulate_model.SpeciesData","title":"<code>SpeciesData</code>  <code>dataclass</code>","text":"<p>Dataclass for storing the species data.</p> Source code in <code>aiagents4pharma/talk2biomodels/tools/simulate_model.py</code> <pre><code>@dataclass\nclass SpeciesData:\n    \"\"\"\n    Dataclass for storing the species data.\n    \"\"\"\n    species_name: List[str] = None\n    species_concentration: List[Union[int, float]] = None\n</code></pre>"},{"location":"talk2biomodels/tools/simulate_model/#aiagents4pharma.talk2biomodels.tools.simulate_model.TimeData","title":"<code>TimeData</code>  <code>dataclass</code>","text":"<p>Dataclass for storing the time data.</p> Source code in <code>aiagents4pharma/talk2biomodels/tools/simulate_model.py</code> <pre><code>@dataclass\nclass TimeData:\n    \"\"\"\n    Dataclass for storing the time data.\n    \"\"\"\n    duration: Union[int, float] = 100\n    interval: Union[int, float] = 10\n</code></pre>"},{"location":"talk2biomodels/tools/simulate_model/#aiagents4pharma.talk2biomodels.tools.simulate_model.TimeSpeciesNameConcentration","title":"<code>TimeSpeciesNameConcentration</code>  <code>dataclass</code>","text":"<p>Dataclass for storing the time, species name, and concentration data.</p> Source code in <code>aiagents4pharma/talk2biomodels/tools/simulate_model.py</code> <pre><code>@dataclass\nclass TimeSpeciesNameConcentration:\n    \"\"\"\n    Dataclass for storing the time, species name, and concentration data.\n    \"\"\"\n    time: Union[int, float] = None\n    species_name: str = None\n    species_concentration: Union[int, float] = None\n</code></pre>"},{"location":"talk2cells/intro/","title":"Talk2Cells","text":"<p>Talk2Cells is being developed to provide direct access to and analysis of sequencing data, such as RNA-Seq or DNA-Seq, using natural language.</p>"},{"location":"talk2cells/intro/#coming-soon","title":"Coming Soon..","text":""}]}